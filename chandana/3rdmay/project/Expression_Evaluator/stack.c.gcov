        -:    0:Source:stack.c
        -:    1:#include "stack.h"  // Include header file for stack structure definition (assumed)
        -:    2:#include <stdlib.h>  // Include standard library for memory allocation (malloc, free)
        -:    3:#include <stdio.h>   // Include standard input/output header (printf)
        -:    4:
        -:    5:// Function to push data onto stack
function push called 10 returned 100% blocks executed 50%
       10:    6:void push(Stack* stack, char data) {
        -:    7:    // Create a new node for the data
       10:    8:    Node* newNode = (Node*)malloc(sizeof(Node));
       10:    9:    if (newNode == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        printf("Error: Memory allocation failed\n");
call    0 never executed
    #####:   11:        exit(EXIT_FAILURE);
call    0 never executed
        -:   12:    }
        -:   13:
        -:   14:    // Set data and next pointer of the new node
       10:   15:    newNode->data = data;
       10:   16:    newNode->next = stack->top;
        -:   17:
        -:   18:    // Update the top pointer of the stack to point to the new node
       10:   19:    stack->top = newNode;
       10:   20:}
        -:   21:
        -:   22:// Function to pop data from stack
function pop called 10 returned 100% blocks executed 67%
       10:   23:char pop(Stack* stack) {
        -:   24:    // Check if stack is empty
       10:   25:    if (is_empty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   26:        printf("Error: Stack is empty\n");
call    0 never executed
    #####:   27:        exit(EXIT_FAILURE);
call    0 never executed
        -:   28:    }
        -:   29:
        -:   30:    // Store the top node and its data
       10:   31:    Node* temp = stack->top;
       10:   32:    char data = temp->data;
        -:   33:
        -:   34:    // Update the top pointer to point to the next node
       10:   35:    stack->top = temp->next;
        -:   36:
        -:   37:    // Free the memory used by the popped node
       10:   38:    free(temp);
        -:   39:
        -:   40:    // Return the popped data
       10:   41:    return data;
        -:   42:}
        -:   43:
        -:   44:// Function to peek at the top of the stack
function peek called 2 returned 100% blocks executed 67%
        2:   45:char peek(Stack* stack) {
        -:   46:    // Check if stack is empty
        2:   47:    if (is_empty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   48:        printf("Error: Stack is empty\n");
call    0 never executed
    #####:   49:        exit(EXIT_FAILURE);
call    0 never executed
        -:   50:    }
        -:   51:
        -:   52:    // Return the data of the top node without removing it
        2:   53:    return stack->top->data;
        -:   54:}
        -:   55:
        -:   56:// Function to check if stack is empty
function is_empty called 19 returned 100% blocks executed 100%
       19:   57:int is_empty(Stack* stack) {
        -:   58:    // Return true if the top pointer is NULL (empty stack)
       19:   59:    return stack->top == NULL;
        -:   60:}
