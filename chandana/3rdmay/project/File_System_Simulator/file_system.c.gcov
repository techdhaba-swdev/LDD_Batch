        -:    0:Source:file_system.c
        -:    1:#include "file_system.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:
        -:    6:// Global variables for root directory and current directory
        -:    7:Directory* rootDirectory = NULL;
        -:    8:Directory* currentDirectory = NULL;
        -:    9:
function initializeFileSystem called 1 returned 100% blocks executed 100%
        1:   10:void initializeFileSystem() {
        -:   11:	//create the root directory
        1:   12:    rootDirectory = (Directory*)malloc(sizeof(Directory));
        1:   13:    rootDirectory->name = strdup("root");
        1:   14:    rootDirectory->parent = NULL;
        1:   15:    rootDirectory->subdirectories = NULL;
        1:   16:    rootDirectory->files = NULL;
        1:   17:    rootDirectory->next = NULL;
        1:   18:    currentDirectory = rootDirectory;//set current directory to root
        1:   19:}
        -:   20:
function createDirectory called 2 returned 100% blocks executed 86%
        2:   21:void createDirectory(const char* name) {
        -:   22:	//create a new directory and add it to the current directory's subdirectories list
        2:   23:    Directory* newDirectory = (Directory*)malloc(sizeof(Directory));
        2:   24:    newDirectory->name = strdup(name);
        2:   25:    newDirectory->parent = currentDirectory;
        2:   26:    newDirectory->subdirectories = NULL;
        2:   27:    newDirectory->files = NULL;
        2:   28:    newDirectory->next = NULL;
        -:   29:
        2:   30:    if (currentDirectory->subdirectories == NULL) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   31:        currentDirectory->subdirectories = newDirectory;
        -:   32:    } else {
        1:   33:        Directory* temp = currentDirectory->subdirectories;
        1:   34:        while (temp->next != NULL) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   35:            temp = temp->next;
        -:   36:        }
        1:   37:        temp->next = newDirectory;
        -:   38:    }
        2:   39:}
        -:   40:
function createFile called 3 returned 100% blocks executed 86%
        3:   41:void createFile(const char* name, int size) {
        -:   42:	//create a new file and add it to the current directory's files list
        3:   43:    File* newFile = (File*)malloc(sizeof(File));
        3:   44:    newFile->name = strdup(name);
        3:   45:    newFile->size = size;
        3:   46:    newFile->next = NULL;
        -:   47:
        3:   48:    if (currentDirectory->files == NULL) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   49:        currentDirectory->files = newFile;
        -:   50:    } else {
        1:   51:        File* temp = currentDirectory->files;
        1:   52:        while (temp->next != NULL) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   53:            temp = temp->next;
        -:   54:        }
        1:   55:        temp->next = newFile;
        -:   56:    }
        3:   57:}
        -:   58:
function viewDirectoryContents called 3 returned 100% blocks executed 100%
        3:   59:void viewDirectoryContents(const char* directoryName) {
        -:   60:	//Iterate over the current directories subdirectores and files and print their names
        3:   61:    Directory* temp = currentDirectory->subdirectories;
        5:   62:    while (temp != NULL) {
branch  0 taken 40%
branch  1 taken 60% (fallthrough)
        2:   63:        printf("Directory: %s\n", temp->name);
call    0 returned 100%
        2:   64:        temp = temp->next;
        -:   65:    }
        -:   66:
        3:   67:    File* fileTemp = currentDirectory->files;
        7:   68:    while (fileTemp != NULL) {
branch  0 taken 57%
branch  1 taken 43% (fallthrough)
        4:   69:        printf("File: %s, Size: %d\n", fileTemp->name, fileTemp->size);
call    0 returned 100%
        4:   70:        fileTemp = fileTemp->next;
        -:   71:    }
        3:   72:}
        -:   73:
function navigateIntoDirectory called 1 returned 100% blocks executed 71%
        1:   74:void navigateIntoDirectory(const char* directoryName) {
        -:   75:	//update the current direcory to the specified subdirecory
        1:   76:    Directory* temp = currentDirectory->subdirectories;
        1:   77:    while (temp != NULL) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        1:   78:        if (strcmp(temp->name, directoryName) == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   79:            currentDirectory = temp;
        1:   80:            return;
        -:   81:        }
    #####:   82:        temp = temp->next;
        -:   83:    }
    #####:   84:    printf("Directory not found.\n");
call    0 never executed
        -:   85:}
        -:   86:
function deleteFile called 1 returned 100% blocks executed 60%
        1:   87:void deleteFile(const char* fileName) {
        -:   88:	//remove the specified file from the current directory's files list
        1:   89:    File* temp = currentDirectory->files;
        1:   90:    File* prev = NULL;
        2:   91:    while (temp != NULL) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   92:        if (strcmp(temp->name, fileName) == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:            if (prev == NULL) {
branch  0 never executed
branch  1 never executed
    #####:   94:                currentDirectory->files = temp->next;
        -:   95:            } else {
    #####:   96:                prev->next = temp->next;
        -:   97:            }
    #####:   98:            free(temp->name);
    #####:   99:            free(temp);
    #####:  100:            return;
        -:  101:        }
        1:  102:        prev = temp;
        1:  103:        temp = temp->next;
        -:  104:    }
        1:  105:    printf("File not found.\n");
call    0 returned 100%
        -:  106:}
        -:  107:
function deleteDirectory called 0 returned 0% blocks executed 0%
    #####:  108:void deleteDirectory(const char* directoryName) {
        -:  109:	//remove the specified directory from the current direcoty's subdirecories list
    #####:  110:    Directory* temp = currentDirectory->subdirectories;
    #####:  111:    Directory* prev = NULL;
    #####:  112:    while (temp != NULL) {
branch  0 never executed
branch  1 never executed
    #####:  113:        if (strcmp(temp->name, directoryName) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  114:            if (prev == NULL) {
branch  0 never executed
branch  1 never executed
    #####:  115:                currentDirectory->subdirectories = temp->next;
        -:  116:            } else {
    #####:  117:                prev->next = temp->next;
        -:  118:            }
    #####:  119:            free(temp->name);
    #####:  120:            free(temp);
    #####:  121:            return;
        -:  122:        }
    #####:  123:        prev = temp;
    #####:  124:        temp = temp->next;
        -:  125:    }
    #####:  126:    printf("Directory not found.\n");
call    0 never executed
        -:  127:}
        -:  128:
function searchFile called 1 returned 100% blocks executed 75%
        1:  129:void searchFile(const char* fileName) {
        -:  130:	//search for the specified file in the current directories files list
        1:  131:    File* temp = currentDirectory->files;
        2:  132:    while (temp != NULL) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  133:        if (strcmp(temp->name, fileName) == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  134:            printf("File found: %s, Size: %d\n", temp->name, temp->size);
call    0 never executed
    #####:  135:            return;
        -:  136:        }
        1:  137:        temp = temp->next;
        -:  138:    }
        1:  139:    printf("File not found.\n");
call    0 returned 100%
        -:  140:}
