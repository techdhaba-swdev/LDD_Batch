        -:    0:Source:main.c
        -:    1:#include <stdio.h>  // Include standard I/O functions
        -:    2:#include <stdlib.h>  // Include standard library functions
        -:    3:#include <time.h>  // Include time functions
        -:    4:#include <limits.h>  // Include library for INT_MIN and INT_MAX
        -:    5:#include "bst.h"  // Include the header file defining the structures and function prototypes
        -:    6:
function main called 1 returned 100% blocks executed 94%
        1:    7:int main() {
        1:    8:    Node* root = NULL;  // Declare a pointer to the root node and initialize it to NULL
        1:    9:    root = insert(root, 50);  // Insert nodes into the BST
call    0 returned 100%
        1:   10:    insert(root, 30);
call    0 returned 100%
        1:   11:    insert(root, 20);
call    0 returned 100%
        1:   12:    insert(root, 40);
call    0 returned 100%
        1:   13:    insert(root, 70);
call    0 returned 100%
        1:   14:    insert(root, 60);
call    0 returned 100%
        1:   15:    insert(root, 80);
call    0 returned 100%
        -:   16:
        1:   17:    printf("Inorder traversal: ");  // Print the result of inorder traversal
call    0 returned 100%
        1:   18:    inorderTraversal(root);
call    0 returned 100%
        1:   19:    printf("\n");
call    0 returned 100%
        -:   20:
        1:   21:    printf("Preorder traversal: ");  // Print the result of preorder traversal
call    0 returned 100%
        1:   22:    preorderTraversal(root);
call    0 returned 100%
        1:   23:    printf("\n");
call    0 returned 100%
        -:   24:
        1:   25:    printf("Postorder traversal: ");  // Print the result of postorder traversal
call    0 returned 100%
        1:   26:    postorderTraversal(root);
call    0 returned 100%
        1:   27:    printf("\n");
call    0 returned 100%
        -:   28:
        1:   29:    int value = 70;  // Value to be searched in the BST
        1:   30:    Node* found = search(root, value);  // Search for the value in the BST
call    0 returned 100%
        1:   31:    if (found)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   32:        printf("%d is found in the tree.\n", value);  // Print if the value is found
call    0 returned 100%
        -:   33:    else
    #####:   34:        printf("%d is not found in the tree.\n", value);  // Print if the value is not found
call    0 never executed
        -:   35:
        1:   36:    int min = INT_MAX, max = INT_MIN;  // Initialize variables to store min and max values
        1:   37:    findMinMax(root, &min, &max);  // Find the minimum and maximum values in the BST
call    0 returned 100%
        1:   38:    printf("Minimum value: %d\n", min);  // Print the minimum value
call    0 returned 100%
        1:   39:    printf("Maximum value: %d\n", max);  // Print the maximum value
call    0 returned 100%
        -:   40:
       1*:   41:    printf("Is the binary tree a BST? %s\n", isBST(root) ? "Yes" : "No");  // Check if the binary tree is a BST
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -:   42:
        1:   43:    printf("Height of the binary tree: %d\n", maxHeight(root));  // Print the height of the binary tree
call    0 returned 100%
call    1 returned 100%
        -:   44:
        -:   45:    // CPU time calculation
        1:   46:    clock_t start = clock();  // Start the clock
call    0 returned 100%
        -:   47:    // Perform some CPU intensive task here
        1:   48:    clock_t end = clock();  // End the clock
call    0 returned 100%
        1:   49:    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;  // Calculate CPU time used
        1:   50:    printf("CPU Time: %f seconds\n", cpu_time_used);  // Print CPU time used
call    0 returned 100%
        -:   51:
        1:   52:    return 0;  // Return 0 to indicate successful completion of the program
        -:   53:}
