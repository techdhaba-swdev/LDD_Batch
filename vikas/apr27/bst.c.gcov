        -:    0:Source:bst.c
        -:    0:Graph:bstr-bst.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "bst.h"
        -:    4:
        -:    5:// Function to create a new node
function createNode called 0 returned 0% blocks executed 0%
    #####:    6:struct node* createNode(int data) {
    #####:    7:    struct node* newNode = (struct node*)malloc(sizeof(struct node));//we are allocating memory to newnode dynamically  using malloc
    #####:    8:    if (newNode == NULL) {
branch  0 never executed
branch  1 never executed
    #####:    9:        printf("Memory allocation failed\n");
call    0 never executed
    #####:   10:        exit(1);
call    0 never executed
        -:   11:    }
    #####:   12:    newNode->data = data;
    #####:   13:    newNode->left = NULL;
    #####:   14:    newNode->right = NULL;
    #####:   15:    return newNode;
        -:   16:}
        -:   17:
        -:   18:// Function to insert a new node with given data into BST
function insert called 0 returned 0% blocks executed 0%
    #####:   19:struct node* insert(struct node* root, int data) {
    #####:   20:    if (root == NULL) {
branch  0 never executed
branch  1 never executed
    #####:   21:        return createNode(data);
call    0 never executed
        -:   22:    }
    #####:   23:    if (data < root->data) {
branch  0 never executed
branch  1 never executed
    #####:   24:        root->left = insert(root->left, data);
call    0 never executed
    #####:   25:    } else if (data > root->data) {
branch  0 never executed
branch  1 never executed
    #####:   26:        root->right = insert(root->right, data);
call    0 never executed
        -:   27:    }
    #####:   28:    return root;
        -:   29:}
        -:   30:
        -:   31:// Function to search for a node with given data in BST
function search called 0 returned 0% blocks executed 0%
    #####:   32:int search(struct node* root, int data) {
    #####:   33:    if (root == NULL) {
branch  0 never executed
branch  1 never executed
    #####:   34:        return 0;
        -:   35:    }
    #####:   36:    if (root->data == data) {
branch  0 never executed
branch  1 never executed
    #####:   37:        return 1;
        -:   38:    }
    #####:   39:    if (data < root->data) {
branch  0 never executed
branch  1 never executed
    #####:   40:        return search(root->left, data);
call    0 never executed
        -:   41:    } else {
    #####:   42:        return search(root->right, data);
call    0 never executed
        -:   43:    }
        -:   44:}
        -:   45:
        -:   46:// Function to perform in-order traversal of BST
function inorderTraversal called 0 returned 0% blocks executed 0%
    #####:   47:void inorderTraversal(struct node* root) {
    #####:   48:    if (root != NULL) {
branch  0 never executed
branch  1 never executed
    #####:   49:        inorderTraversal(root->left);
call    0 never executed
    #####:   50:        printf("%d ", root->data);
call    0 never executed
    #####:   51:        inorderTraversal(root->right);
call    0 never executed
        -:   52:    }
    #####:   53:}
