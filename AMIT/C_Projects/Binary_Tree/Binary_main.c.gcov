        -:    0:Source:Binary_main.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <limits.h> //for INT_MIN and INT_MAX
        -:    5:#include"tree.h"
        -:    6:#include<time.h>
        -:    7:
function main called 1 returned 100% blocks executed 94%
        1:    8:int main()
        -:    9:{  
        1:   10:    clock_t start = clock();
call    0 returned 100%
        1:   11:    struct Node* root = NULL;
        -:   12:
        -:   13:    // Insertion
        1:   14:    root = insert(root, 50);
call    0 returned 100%
        1:   15:    insert(root, 30);
call    0 returned 100%
        1:   16:    insert(root, 20);
call    0 returned 100%
        1:   17:    insert(root, 40);
call    0 returned 100%
        1:   18:    insert(root, 70);
call    0 returned 100%
        1:   19:    insert(root, 60);
call    0 returned 100%
        1:   20:    insert(root, 80);
call    0 returned 100%
        -:   21:
        -:   22:    // In-order traversal
        1:   23:    printf("In-order traversal: ");
call    0 returned 100%
        1:   24:    inOrderTraversal(root);
call    0 returned 100%
        1:   25:    printf("\n");
call    0 returned 100%
        -:   26:
        -:   27:    // Search
        1:   28:    int searchValue = 70;
        1:   29:    struct Node* searchedNode = search(root, searchValue);
call    0 returned 100%
        1:   30:    if (searchedNode != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   31:        printf("%d found in the BST.\n", searchValue);
call    0 returned 100%
        -:   32:    } else {
    #####:   33:        printf("%d not found in the BST.\n", searchValue);
call    0 never executed
        -:   34:    }
        -:   35:
        -:   36:    // Minimum and Maximum
        1:   37:    printf("Minimum value in the BST: %d\n", findMin(root)->data);
call    0 returned 100%
call    1 returned 100%
        1:   38:    printf("Maximum value in the BST: %d\n", findMax(root)->data);
call    0 returned 100%
call    1 returned 100%
        -:   39:
        -:   40:    // Deletion
        1:   41:    int deleteValue = 30;
        1:   42:    root = deleteNode(root, deleteValue);
call    0 returned 100%
        1:   43:    printf("In-order traversal after deleting %d: ", deleteValue);
call    0 returned 100%
        1:   44:    inOrderTraversal(root);
call    0 returned 100%
        1:   45:    printf("\n");
call    0 returned 100%
        -:   46:
        -:   47:    // Check if the tree is a BST
       1*:   48:    printf("Is the tree a BST? %s\n", isBST(root) ? "Yes" : "No");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -:   49:
        -:   50:    // Height
        1:   51:    printf("Height of the BST: %d\n", height(root));
call    0 returned 100%
call    1 returned 100%
        -:   52:     
        1:   53:    clock_t end = clock();
call    0 returned 100%
        -:   54:
        -:   55:    // Calculate the elapsed time
        -:   56:
        1:   57:    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
        1:   58:      printf("Time taken: %f seconds\n", time_taken);
call    0 returned 100%
        -:   59:
        1:   60:    return 0;
        -:   61:}
