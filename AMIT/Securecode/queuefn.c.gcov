        -:    0:Source:queuefn.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:#include"queue.h"
        -:    4:
        -:    5:// Initialize an empty queue
        1:    6:void initializeQueue(struct Queue* queue) {
        1:    7:    queue->front = queue->rear = -1;
        1:    8:}
        -:    9:
        -:   10:// Check if the queue is empty
        6:   11:bool isEmpty(struct Queue* queue) {
        6:   12:    return queue->front == -1;
        -:   13:}
        -:   14:
        -:   15:// Check if the queue is full
        3:   16:bool isFull(struct Queue* queue) {
        3:   17:    return (queue->rear + 1) % MAX_QUEUE_SIZE == queue->front;
        -:   18:}
        -:   19:
        -:   20:// Enqueue (add) an element to the queue
        3:   21:void enqueue(struct Queue* queue, int value) {
        3:   22:    if (isFull(queue)) {
    #####:   23:        printf("Queue overflow! Cannot enqueue %d.\n", value);
    #####:   24:        return;
        -:   25:    }
        3:   26:    if (isEmpty(queue))
        1:   27:        queue->front = 0;
        3:   28:    queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
        3:   29:    queue->data[queue->rear] = value;
        -:   30:}
        -:   31:
        -:   32:// Dequeue (remove) an element from the queue
        1:   33:int dequeue(struct Queue* queue) {
        1:   34:    if (isEmpty(queue)) {
    #####:   35:        printf("Queue underflow! Cannot dequeue.\n");
    #####:   36:        return -1; // Or any sentinel value
        -:   37:    }
        1:   38:    int value = queue->data[queue->front];
        1:   39:    if (queue->front == queue->rear)
    #####:   40:        queue->front = queue->rear = -1;
        -:   41:    else
        1:   42:        queue->front = (queue->front + 1) % MAX_QUEUE_SIZE;
        1:   43:    return value;
        -:   44:}
        -:   45:
        -:   46:// Peek at the front element without removing it
        2:   47:int peek(struct Queue* queue) {
        2:   48:    if (isEmpty(queue)) {
    #####:   49:        printf("Queue is empty.\n");
    #####:   50:        return -1; // Or any sentinel value
        -:   51:    }
        2:   52:    return queue->data[queue->front];
        -:   53:}
        -:   54:
