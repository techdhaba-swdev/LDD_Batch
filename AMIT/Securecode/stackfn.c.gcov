        -:    0:Source:stackfn.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <limits.h>
        -:    4:#include"stack.h"
        -:    5:
        -:    6:
        -:    7:// Initialize an empty stack
function initializeStack called 1 returned 100% blocks executed 100%
        1:    8:void initializeStack(struct Stack* stack) {
        1:    9:    stack->top = -1;
        1:   10:}
        -:   11:
        -:   12:// Check if the stack is empty
function isEmpty called 3 returned 100% blocks executed 100%
        3:   13:int isEmpty(struct Stack* stack) {
        3:   14:    return stack->top == -1;
        -:   15:}
        -:   16:
        -:   17:// Check if the stack is full
function isFull called 3 returned 100% blocks executed 100%
        3:   18:int isFull(struct Stack* stack) {
        3:   19:    return stack->top == MAX_STACK_SIZE - 1;
        -:   20:}
        -:   21:
        -:   22:// Push an element onto the stack
function push called 3 returned 100% blocks executed 67%
        3:   23:void push(struct Stack* stack, int value) {
        3:   24:    if (isFull(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   25:        printf("Stack overflow! Cannot push %d.\n", value);
call    0 never executed
    #####:   26:        return;
        -:   27:    }
        3:   28:    stack->data[++stack->top] = value;
        -:   29:}
        -:   30:
        -:   31:// Pop an element from the stack
function pop called 1 returned 100% blocks executed 67%
        1:   32:int pop(struct Stack* stack) {
        1:   33:    if (isEmpty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   34:        printf("Stack underflow! Cannot pop.\n");
call    0 never executed
    #####:   35:        return INT_MIN;
        -:   36:    }
        1:   37:    return stack->data[stack->top--];
        -:   38:}
        -:   39:
        -:   40:// Peek at the top element without removing it
function peek called 2 returned 100% blocks executed 67%
        2:   41:int peek(struct Stack* stack) {
        2:   42:    if (isEmpty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:        printf("Stack is empty.\n");
call    0 never executed
    #####:   44:        return INT_MIN;
        -:   45:    }
        2:   46:    return stack->data[stack->top];
        -:   47:}
        -:   48:
