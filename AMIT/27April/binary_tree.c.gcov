        -:    0:Source:binary_tree.c
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include"binarytree.h"
        -:    4:
function main called 1 returned 100% blocks executed 95%
        1:    5:int main()
        -:    6:{
        1:    7:	struct node* root =NULL;
        1:    8:	root = insert(root,69);
call    0 returned 100%
        1:    9:	insert(root,35);                   //inserting nodes by insert function
call    0 returned 100%
        1:   10:	insert(root,21);                  
call    0 returned 100%
        1:   11:	insert(root,45);
call    0 returned 100%
        1:   12:	insert(root,77);
call    0 returned 100%
        1:   13:	insert(root,66);
call    0 returned 100%
        1:   14:	insert(root,88);
call    0 returned 100%
        -:   15:
        1:   16:    printf("In-order traversal: ");
call    0 returned 100%
        1:   17:    inorderTraversal(root);                          
call    0 returned 100%
        1:   18:    printf("\n");
call    0 returned 100%
        1:   19:    printf("Minimum value in the BST: %d\n", minValueNode(root)->data);
call    0 returned 100%
call    1 returned 100%
        1:   20:    printf("Maximum value in the BST: %d\n", maxValueNode(root)->data);
call    0 returned 100%
call    1 returned 100%
        1:   21:    printf("Height of the BST: %d\n", treeHeight(root));
call    0 returned 100%
call    1 returned 100%
        -:   22:
        1:   23:    int searchValue = 45;
        1:   24:    if (search(root, searchValue))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   25:        printf("%d found in the BST.\n", searchValue);
call    0 returned 100%
        -:   26:    else
    #####:   27:        printf("%d not found in the BST.\n", searchValue);
call    0 never executed
        -:   28:
        1:   29:    return 0;
        -:   30:}
