        -:    0:Source:bst.c
        -:    1:#include "bst.h"  // Include the header file defining the structures and function prototypes
        -:    2:#include <stdio.h>  // Include standard I/O functions
        -:    3:#include <stdlib.h>  // Include standard library functions
        -:    4:#include <limits.h>  // Include library for INT_MIN and INT_MAX
        -:    5:
        -:    6:// Function to create a new node with the given data
function createNode called 7 returned 100% blocks executed 100%
        7:    7:Node* createNode(int data) {
        7:    8:    Node* newNode = (Node*)malloc(sizeof(Node));  // Allocate memory for the new node
        7:    9:    newNode->data = data;  // Assign the data to the new node
        7:   10:    newNode->left = newNode->right = NULL;  // Set left and right child pointers to NULL
        7:   11:    return newNode;  // Return the newly created node
        -:   12:}
        -:   13:
        -:   14:// Function to insert a node with the given data into the BST
function insert called 17 returned 100% blocks executed 100%
       17:   15:Node* insert(Node* root, int data) {
       17:   16:    if (root == NULL)  // If the root is NULL, create a new node and return it
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        7:   17:        return createNode(data);
call    0 returned 100%
       10:   18:    if (data < root->data)  // If data is less than the root's data, insert into the left subtree
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        5:   19:        root->left = insert(root->left, data);
call    0 returned 100%
        5:   20:    else if (data > root->data)  // If data is greater than the root's data, insert into the right subtree
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   21:        root->right = insert(root->right, data);
call    0 returned 100%
       10:   22:    return root;  // Return the root of the modified BST
        -:   23:}
        -:   24:
        -:   25:// Function to delete a node with the given data from the BST
function deleteNode called 0 returned 0% blocks executed 0%
    #####:   26:Node* deleteNode(Node* root, int data) {
    #####:   27:    if (root == NULL)  // If the root is NULL, return NULL
branch  0 never executed
branch  1 never executed
    #####:   28:        return root;
    #####:   29:    if (data < root->data)  // If data is less than the root's data, delete from the left subtree
branch  0 never executed
branch  1 never executed
    #####:   30:        root->left = deleteNode(root->left, data);
call    0 never executed
    #####:   31:    else if (data > root->data)  // If data is greater than the root's data, delete from the right subtree
branch  0 never executed
branch  1 never executed
    #####:   32:        root->right = deleteNode(root->right, data);
call    0 never executed
        -:   33:    else {  // If the node to be deleted is found
    #####:   34:        if (root->left == NULL) {  // If the node has no left child
branch  0 never executed
branch  1 never executed
    #####:   35:            Node* temp = root->right;  // Store the right child temporarily
    #####:   36:            free(root);  // Free the memory occupied by the node
    #####:   37:            return temp;  // Return the right child to connect with the parent
    #####:   38:        } else if (root->right == NULL) {  // If the node has no right child
branch  0 never executed
branch  1 never executed
    #####:   39:            Node* temp = root->left;  // Store the left child temporarily
    #####:   40:            free(root);  // Free the memory occupied by the node
    #####:   41:            return temp;  // Return the left child to connect with the parent
        -:   42:        }
        -:   43:        // If the node has both left and right children
    #####:   44:        Node* temp = root->right;  // Find the minimum node in the right subtree
    #####:   45:        while (temp->left != NULL)
branch  0 never executed
branch  1 never executed
    #####:   46:            temp = temp->left;
    #####:   47:        root->data = temp->data;  // Copy the data of the minimum node to the current node
    #####:   48:        root->right = deleteNode(root->right, temp->data);  // Delete the minimum node from the right subtree
call    0 never executed
        -:   49:    }
    #####:   50:    return root;  // Return the root of the modified BST
        -:   51:}
        -:   52:
        -:   53:// Function to search for a node with the given data in the BST
function search called 2 returned 100% blocks executed 75%
        2:   54:Node* search(Node* root, int data) {
        2:   55:    if (root == NULL || root->data == data)  // If root is NULL or data is found at the root, return root
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:   56:        return root;
        1:   57:    if (data < root->data)  // If data is less than the root's data, search in the left subtree
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:        return search(root->left, data);
call    0 never executed
        1:   59:    return search(root->right, data);  // If data is greater than the root's data, search in the right subtree
call    0 returned 100%
        -:   60:}
        -:   61:
        -:   62:// Function to perform in-order traversal of the BST
function inorderTraversal called 15 returned 100% blocks executed 100%
       15:   63:void inorderTraversal(Node* root) {
       15:   64:    if (root != NULL) {  // If the root is not NULL
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        7:   65:        inorderTraversal(root->left);  // Recursively traverse the left subtree
call    0 returned 100%
        7:   66:        printf("%d ", root->data);  // Print the data of the current node
call    0 returned 100%
        7:   67:        inorderTraversal(root->right);  // Recursively traverse the right subtree
call    0 returned 100%
        -:   68:    }
       15:   69:}
        -:   70:
        -:   71:// Function to perform pre-order traversal of the BST
function preorderTraversal called 15 returned 100% blocks executed 100%
       15:   72:void preorderTraversal(Node* root) {
       15:   73:    if (root != NULL) {  // If the root is not NULL
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        7:   74:        printf("%d ", root->data);  // Print the data of the current node
call    0 returned 100%
        7:   75:        preorderTraversal(root->left);  // Recursively traverse the left subtree
call    0 returned 100%
        7:   76:        preorderTraversal(root->right);  // Recursively traverse the right subtree
call    0 returned 100%
        -:   77:    }
       15:   78:}
        -:   79:
        -:   80:// Function to perform post-order traversal of the BST
function postorderTraversal called 15 returned 100% blocks executed 100%
       15:   81:void postorderTraversal(Node* root) {
       15:   82:    if (root != NULL) {  // If the root is not NULL
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        7:   83:        postorderTraversal(root->left);  // Recursively traverse the left subtree
call    0 returned 100%
        7:   84:        postorderTraversal(root->right);  // Recursively traverse the right subtree
call    0 returned 100%
        7:   85:        printf("%d ", root->data);  // Print the data of the current node
call    0 returned 100%
        -:   86:    }
       15:   87:}
        -:   88:
        -:   89:// Utility function to check if the binary tree rooted at the given node is a BST
function isBSTUtil called 15 returned 100% blocks executed 85%
       15:   90:bool isBSTUtil(Node* root, int min, int max) {
       15:   91:    if (root == NULL)  // If the root is NULL, it's a BST
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        8:   92:        return true;
        7:   93:    if (root->data < min || root->data > max)  // If the data of the root is outside the valid range, not a BST
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   94:        return false;
        -:   95:    // Check recursively for left and right subtrees
       7*:   96:    return isBSTUtil(root->left, min, root->data - 1) && isBSTUtil(root->right, root->data + 1, max);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   97:}
        -:   98:
        -:   99:// Function to check if the binary tree is a BST
function isBST called 1 returned 100% blocks executed 100%
        1:  100:bool isBST(Node* root) {
        1:  101:    return isBSTUtil(root, INT_MIN, INT_MAX);  // Call utility function with initial range as INT_MIN and INT_MAX
call    0 returned 100%
        -:  102:}
        -:  103:
        -:  104:// Function to find the maximum height of the binary tree
function maxHeight called 15 returned 100% blocks executed 89%
       15:  105:int maxHeight(Node* root) {
       15:  106:    if (root == NULL)  // If the root is NULL, height is 0
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        8:  107:        return 0;
        -:  108:    // Calculate heights of left and right subtrees recursively
        7:  109:    int leftHeight = maxHeight(root->left);
call    0 returned 100%
        7:  110:    int rightHeight = maxHeight(root->right);
call    0 returned 100%
        -:  111:    // Return the maximum of the heights plus 1 (for the current node)
       7*:  112:    return (leftHeight > rightHeight) ? leftHeight + 1 : rightHeight + 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  113:}
        -:  114:
        -:  115:// Function to find the minimum and maximum values in the binary tree
function findMinMax called 15 returned 100% blocks executed 100%
       15:  116:void findMinMax(Node* root, int* min, int* max) {
       15:  117:    if (root == NULL)  // If the root is NULL, return
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        8:  118:        return;
        7:  119:    findMinMax(root->left, min, max);  // Recursively find min/max in the left subtree
call    0 returned 100%
        7:  120:    if (root->data < *min)  // Update min if the data of the current node is smaller
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:  121:        *min = root->data;
        7:  122:    if (root->data > *max)  // Update max if the data of the current node is larger
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  123:        *max = root->data;
        7:  124:    findMinMax(root->right, min, max);  // Recursively find min/max in the right subtree
call    0 returned 100%
        -:  125:}
