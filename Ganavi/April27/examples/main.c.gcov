        -:    0:Source:main.c
        -:    1:#include <stdio.h>
        -:    2:#include <dlfcn.h>
        -:    3:
        -:    4:// Function prototypes
        -:    5:void load_and_execute(const char *library_path, const char *function_name);
        -:    6:
function main called 1 returned 100% blocks executed 100%
        1:    7:int main() {
        -:    8:    // Call the function to load and execute dynamically
        1:    9:    load_and_execute("./libexample.so", "hello_dynamic");
call    0 returned 100%
        -:   10:
        1:   11:    return 0;
        -:   12:}
        -:   13:
        -:   14:// Function to load and execute a function from a shared library dynamically
function load_and_execute called 1 returned 100% blocks executed 50%
        1:   15:void load_and_execute(const char *library_path, const char *function_name) {
        -:   16:    // Load the shared library
        1:   17:    void *lib_handle = dlopen(library_path, RTLD_LAZY);
call    0 returned 100%
        1:   18:    if (!lib_handle) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   19:        // Error handling for library loading failure
    #####:   20:        fprintf(stderr, "Error: %s\n", dlerror());
call    0 never executed
call    1 never executed
    #####:   21:        return;
        -:   22:    }
        -:   23: 
        -:   24:    // Get a pointer to the function
        1:   25:    void (*dynamic_function)() = dlsym(lib_handle, function_name);
call    0 returned 100%
        1:   26:    if (!dynamic_function) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   27:        // Error handling for function symbol retrieval failure
    #####:   28:        fprintf(stderr, "Error: %s\n", dlerror());
call    0 never executed
call    1 never executed
    #####:   29:        dlclose(lib_handle); // Close the library
call    0 never executed
    #####:   30:        return;
        -:   31:    }
        -:   32: 
        -:   33:    // Call the function
        1:   34:    dynamic_function();
call    0 returned 100%
        -:   35: 
        -:   36:    // Close the library
        1:   37:    dlclose(lib_handle);
call    0 returned 100%
        -:   38:}
        -:   39:
