        -:    0:Source:main.c
        -:    1:#include<stdio.h>
        -:    2:#include"binary_tree.h"
function main called 1 returned 100% blocks executed 95%
        1:    3:int main() {
        1:    4:    struct Node* root = NULL;
        1:    5:    root = insert(root, 20);
call    0 returned 100%
        1:    6:    insert(root, 100);
call    0 returned 100%
        1:    7:    insert(root, 40);
call    0 returned 100%
        1:    8:    insert(root, 30);
call    0 returned 100%
        1:    9:    insert(root, 90);
call    0 returned 100%
        1:   10:    insert(root, 60);
call    0 returned 100%
        1:   11:    insert(root, 80);
call    0 returned 100%
        -:   12:
        1:   13:    printf("In-order traversal: ");
call    0 returned 100%
        1:   14:    inorderTraversal(root);
call    0 returned 100%
        1:   15:    printf("\n");
call    0 returned 100%
        -:   16:
        1:   17:    printf("Pre-order traversal: ");
call    0 returned 100%
        1:   18:    preorderTraversal(root);
call    0 returned 100%
        1:   19:    printf("\n");
call    0 returned 100%
        -:   20:
        1:   21:    printf("Post-order traversal: ");
call    0 returned 100%
        1:   22:    postorderTraversal(root);
call    0 returned 100%
        1:   23:    printf("\n");
call    0 returned 100%
        -:   24:
        1:   25:    int key = 40;
        1:   26:    struct Node* searchResult = search(root, key);
call    0 returned 100%
        1:   27:    if (searchResult != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   28:        printf("%d found in the tree.\n", key);
call    0 returned 100%
        -:   29:    else
    #####:   30:        printf("%d not found in the tree.\n", key);
call    0 never executed
        -:   31:
       1*:   32:    printf("Is the tree a BST? %s\n", isBST(root) ? "Yes" : "No");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -:   33:
        1:   34:    printf("Height of the tree is %d\n", maxDepth(root));
call    0 returned 100%
call    1 returned 100%
        -:   35:
        1:   36:    printf("Minimum value in the tree is %d\n", minValue(root));
call    0 returned 100%
call    1 returned 100%
        1:   37:    printf("Maximum value in the tree is %d\n", maxValue(root));
call    0 returned 100%
call    1 returned 100%
        -:   38:
        -:   39:    // Delete a node
        1:   40:    int deleteKey = 40;
        1:   41:    root = deleteNode(root, deleteKey);
call    0 returned 100%
        1:   42:    printf("In-order traversal after deletion of %d: ", deleteKey);
call    0 returned 100%
        1:   43:    inorderTraversal(root);
call    0 returned 100%
        1:   44:    printf("\n");
call    0 returned 100%
        -:   45:
        1:   46:    return 0;
        -:   47:}
        -:   48:
        -:   49:
        -:   50:
        -:   51:
