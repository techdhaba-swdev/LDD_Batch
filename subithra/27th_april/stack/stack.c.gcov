        -:    0:Source:stack.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "stack.h"
        -:    4:
        -:    5:#define MAX_SIZE 5 //define the maximun elements 
        -:    6:
        -:    7:static int stack[MAX_SIZE]; //initalize stack array
        -:    8:static int top = -1;        //initialise top as -1
        -:    9:
function stack_push called 4 returned 100% blocks executed 67%
        4:   10:void stack_push(int data) { //implementing push function
        4:   11:    if (stack_is_full()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   12:        printf("Stack overflow\n"); //print if stack is overflow
call    0 never executed
    #####:   13:        return;
        -:   14:    }
        4:   15:    stack[++top] = data; 
        -:   16:}
        -:   17:
function stack_pop called 2 returned 100% blocks executed 67%
        2:   18:int stack_pop() { //implementing pop function
        2:   19:    if (stack_is_empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   20:        printf("Stack underflow\n"); //print if stack is underflow
call    0 never executed
    #####:   21:        exit(EXIT_FAILURE);
call    0 never executed
        -:   22:    }
        2:   23:    return stack[top--];
        -:   24:}
        -:   25:
function stack_is_empty called 2 returned 100% blocks executed 100%
        2:   26:bool stack_is_empty() {//implementing stack empty function
        2:   27:    return top == -1;
        -:   28:}
        -:   29:
function stack_is_full called 4 returned 100% blocks executed 100%
        4:   30:bool stack_is_full() { ////implementing stack full function
        4:   31:    return top == MAX_SIZE - 1;
        -:   32:}
