        -:    0:Source:main.c
        -:    1:#include <stdio.h>
        -:    2:#include "bst.h"
        -:    3:
function main called 1 returned 100% blocks executed 90%
        1:    4:int main() {
        -:    5:    // Initialize the root of the BST as NULL
        1:    6:    struct node* root = NULL;
        -:    7:
        -:    8:    // Insert some elements into the BST
        1:    9:    root = insert(root, 50);
call    0 returned 100%
        1:   10:    root = insert(root, 30);
call    0 returned 100%
        1:   11:    root = insert(root, 20);
call    0 returned 100%
        1:   12:    root = insert(root, 40);
call    0 returned 100%
        1:   13:    root = insert(root, 70);
call    0 returned 100%
        1:   14:    root = insert(root, 60);
call    0 returned 100%
        1:   15:    root = insert(root, 80);
call    0 returned 100%
        -:   16:
        -:   17:    // Perform an in-order traversal of the BST and print the elements
        1:   18:    printf("Inorder traversal of the BST: ");
call    0 returned 100%
        1:   19:    inorderTraversal(root);
call    0 returned 100%
        1:   20:    printf("\n");
call    0 returned 100%
        -:   21:
        -:   22:    // Search for elements in the BST
        1:   23:    int searchKey = 40;
        1:   24:    if (search(root, searchKey)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   25:        printf("%d is found in the BST.\n", searchKey);
call    0 returned 100%
        -:   26:    } else {
    #####:   27:        printf("%d is not found in the BST.\n", searchKey);
call    0 never executed
        -:   28:    }
        -:   29:
        1:   30:    searchKey = 90;
        1:   31:    if (search(root, searchKey)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   32:        printf("%d is found in the BST.\n", searchKey);
call    0 never executed
        -:   33:    } else {
        1:   34:        printf("%d is not found in the BST.\n", searchKey);
call    0 returned 100%
        -:   35:    }
        -:   36:
        -:   37:    // Deallocate memory for the entire BST
        1:   38:    destroyTree(root);
call    0 returned 100%
        -:   39:
        1:   40:    return 0;
        -:   41:}
