        -:    0:Source:linkedlist.c
        -:    1:#include "linkedlist.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// Define the structure of a node
        -:    6:struct Node {
        -:    7:    int data;
        -:    8:    struct Node* next;
        -:    9:};
        -:   10:
function insertAtBeginning called 3 returned 100% blocks executed 50%
        3:   11:void insertAtBeginning(struct Node** head_ref, int new_data) {
        -:   12:    // Allocate memory for new node
        3:   13:    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        3:   14:    if (new_node == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   15:        fprintf(stderr, "Error: Memory allocation failed for new node.\n");
call    0 never executed
    #####:   16:        exit(EXIT_FAILURE);
call    0 never executed
        -:   17:    }
        -:   18:    
        -:   19:    // Assign data to the new node
        3:   20:    new_node->data = new_data;
        -:   21:    
        -:   22:    // Make the next of new node as head
        3:   23:    new_node->next = (*head_ref);
        -:   24:    
        -:   25:    // Move the head to point to the new node
        3:   26:    (*head_ref) = new_node;
        3:   27:}
        -:   28:
function printList called 1 returned 100% blocks executed 100%
        1:   29:void printList(const struct Node* node) {
        4:   30:    while (node != NULL) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   31:        printf("%d ", node->data);
call    0 returned 100%
        3:   32:        node = node->next;
        -:   33:    }
        1:   34:    printf("\n");
call    0 returned 100%
        1:   35:}
        -:   36:
function freeList called 1 returned 100% blocks executed 100%
        1:   37:void freeList(struct Node* head) {
        -:   38:    struct Node* temp;
        4:   39:    while (head != NULL) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   40:        temp = head;
        3:   41:        head = head->next;
        3:   42:        free(temp);
        -:   43:    }
        1:   44:}
