        -:    0:Source:bubble_sort.c
        -:    1:#include "bubble_sort.h" // Include the header file
        -:    2:
function bubble_sort called 1 returned 100% blocks executed 91%
        1:    3:void bubble_sort(int arr[], size_t n) { // Define bubble sort function
       1*:    4:    if (n == 0) return; // If the array is empty, no need to sort
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:    5:    
        5:    6:    for (size_t i = 0; i < n - 1; i++) { // Outer loop for passes
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       14:    7:        for (size_t j = 0; j < n - i - 1; j++) { // Inner loop for comparisons
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       10:    8:            if (arr[j] > arr[j + 1]) { // If current element is greater than next element
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:    9:                // Swap arr[j] and arr[j+1]
        6:   10:                int temp = arr[j];
        6:   11:                arr[j] = arr[j + 1];
        6:   12:                arr[j + 1] = temp;
        -:   13:            }
        -:   14:        }
        -:   15:    }
        -:   16:}
