        -:    0:Source:merge.c
        -:    1:#include "merge.h" // Include the header file for function declarations
        -:    2:
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:// Merge two sorted subarrays arr[l..m] and arr[m+1..r]
function merge called 0 returned 0% blocks executed 0%
    #####:    6:void merge(int arr[], size_t l, size_t m, size_t r) {
    #####:    7:    if (arr == NULL) { // Check if the array pointer is NULL
branch  0 never executed
branch  1 never executed
    #####:    8:        fprintf(stderr, "Error: NULL pointer passed to merge function\n"); // Print error message
call    0 never executed
    #####:    9:        return; // Return without performing any operation
        -:   10:    }
        -:   11:
    #####:   12:    size_t n1 = m - l + 1; // Calculate the size of the left subarray
    #####:   13:    size_t n2 = r - m;     // Calculate the size of the right subarray
        -:   14:
        -:   15:    // Create temporary arrays for left and right subarrays
    #####:   16:    int *L = malloc(n1 * sizeof(int)); // Secure: Check if memory allocation is successful
    #####:   17:    int *R = malloc(n2 * sizeof(int)); // Secure: Check if memory allocation is successful
        -:   18:
    #####:   19:    if (L == NULL || R == NULL) { // Check if memory allocation failed for any array
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   20:        fprintf(stderr, "Error: Memory allocation failed in merge function\n"); // Print error message
call    0 never executed
    #####:   21:        if (L != NULL) // Secure: Free memory if it was allocated before error occurred
branch  0 never executed
branch  1 never executed
    #####:   22:            free(L);
    #####:   23:        if (R != NULL)
branch  0 never executed
branch  1 never executed
    #####:   24:            free(R);
    #####:   25:        return; // Return without performing any operation
        -:   26:    }
        -:   27:
        -:   28:    // Copy data to temporary arrays L[] and R[]
    #####:   29:    for (size_t i = 0; i < n1; i++) // Copy elements to the left subarray
branch  0 never executed
branch  1 never executed
    #####:   30:        L[i] = arr[l + i];
    #####:   31:    for (size_t j = 0; j < n2; j++) // Copy elements to the right subarray
branch  0 never executed
branch  1 never executed
    #####:   32:        R[j] = arr[m + 1 + j];
        -:   33:
        -:   34:    // Merge the temporary arrays back into arr[l..r]
    #####:   35:    size_t i = 0, j = 0, k = l; // Initialize indices for merging
        -:   36:    // Merge the elements from left and right subarrays into arr[]
    #####:   37:    while (i < n1 && j < n2) { // Iterate until either left or right subarray is exhausted
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   38:        if (L[i] <= R[j]) {    // If element in left subarray is smaller or equal to element in right subarray
branch  0 never executed
branch  1 never executed
    #####:   39:            arr[k] = L[i];     // Copy the element from left subarray to arr[]
    #####:   40:            i++;               // Move to the next element in left subarray
        -:   41:        } else {               // If element in right subarray is smaller
    #####:   42:            arr[k] = R[j];     // Copy the element from right subarray to arr[]
    #####:   43:            j++;               // Move to the next element in right subarray
        -:   44:        }
    #####:   45:        k++;                   // Move to the next position in arr[]
        -:   46:    }
        -:   47:
        -:   48:    // Copy the remaining elements of L[], if any
    #####:   49:    while (i < n1) {           // If there are remaining elements in left subarray
branch  0 never executed
branch  1 never executed
    #####:   50:        arr[k] = L[i];         // Copy them to arr[]
    #####:   51:        i++;                   // Move to the next element in left subarray
    #####:   52:        k++;                   // Move to the next position in arr[]
        -:   53:    }
        -:   54:
        -:   55:    // Copy the remaining elements of R[], if any
    #####:   56:    while (j < n2) {           // If there are remaining elements in right subarray
branch  0 never executed
branch  1 never executed
    #####:   57:        arr[k] = R[j];         // Copy them to arr[]
    #####:   58:        j++;                   // Move to the next element in right subarray
    #####:   59:        k++;                   // Move to the next position in arr[]
        -:   60:    }
        -:   61:
    #####:   62:    free(L); // Free dynamically allocated memory for left subarray
    #####:   63:    free(R); // Free dynamically allocated memory for right subarray
        -:   64:}
        -:   65:
        -:   66:// Recursive function to perform merge sort on array arr[l..r]
function merge_sort_recursive called 0 returned 0% blocks executed 0%
    #####:   67:void merge_sort_recursive(int arr[], size_t l, size_t r) {
    #####:   68:    if (arr == NULL || l >= r) // Check if the array pointer is NULL or if the subarray has only one element
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:        return; // Return without performing any operation
        -:   70:
    #####:   71:    size_t m = l + (r - l) / 2; // Calculate the middle index
        -:   72:
        -:   73:    // Sort first and second halves recursively
    #####:   74:    merge_sort_recursive(arr, l, m);
call    0 never executed
    #####:   75:    merge_sort_recursive(arr, m + 1, r);
call    0 never executed
        -:   76:
        -:   77:    // Merge the sorted halves
    #####:   78:    merge(arr, l, m, r);
call    0 never executed
        -:   79:}
        -:   80:
        -:   81:// Main merge sort function
function merge_sort called 0 returned 0% blocks executed 0%
    #####:   82:void merge_sort(int arr[], size_t n) {
    #####:   83:    if (arr == NULL || n == 0) { // Check if the array pointer is NULL or if the array size is zero
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   84:        fprintf(stderr, "Error: Invalid input to merge_sort function\n"); // Print error message
call    0 never executed
    #####:   85:        return; // Return without performing any operation
        -:   86:    }
        -:   87:
        -:   88:    // Call the recursive function to perform merge sort
    #####:   89:    merge_sort_recursive(arr, 0, n - 1);
call    0 never executed
        -:   90:}
