        -:    0:Source:jump_search.c
        -:    1:#include "jump_search.h"
        -:    2:#include <math.h>
        -:    3:
        -:    4:// Function to perform jump search
function jumpSearch called 1 returned 100% blocks executed 91%
        1:    5:int jumpSearch(const int array[], int size, int target) {
        1:    6:    int jump = (int)sqrt(size); // Calculate the jump size
        1:    7:    int left = 0; // Left index of the current block
        1:    8:    int right = jump; // Right index of the current block
        -:    9:
        -:   10:    // Jump through the blocks until the target is found or the end of the array is reached
        2:   11:    while (right < size && array[right] < target) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
        1:   12:        left = right; // Move the left index to the start of the next block
        1:   13:        right += jump; // Move the right index to the end of the next block
        -:   14:    }
        -:   15:
        -:   16:    // Perform linear search within the block
        4:   17:    for (int i = left; i <= fmin(right, size - 1); i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        4:   18:        if (array[i] == target) { // If target found
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   19:            return i; // Return the index of the target
        -:   20:        }
        -:   21:    }
        -:   22:
    #####:   23:    return -1; // Return -1 if target not found in the array
        -:   24:}
