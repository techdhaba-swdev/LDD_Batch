        -:    0:Source:expression_evaluator.c
        -:    1:#include "stack.h"  // Include header file for stack operations (assumed)
        -:    2:#include <ctype.h>  // Include header for character classification functions
        -:    3:#include <stdio.h>  // Include standard input/output header
        -:    4:
        -:    5:// Function to check if character is an operator
function is_operator called 3 returned 100% blocks executed 100%
        3:    6:int is_operator(char c) {
        -:    7:    // Check if the character is one of the common arithmetic operators
        3:    8:    return c == '+' || c == '-' || c == '*' || c == '/';
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:    9:}
        -:   10:
        -:   11:// Function to get precedence of operator
function precedence called 2 returned 100% blocks executed 88%
        2:   12:int precedence(char c) {
        -:   13:    // Assign precedence levels based on operator type
        2:   14:    if (c == '+' || c == '-') {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   15:        return 1;
        2:   16:    } else if (c == '*' || c == '/') {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:   17:        return 2;
        -:   18:    } else {
        1:   19:        return 0; // Parentheses have highest precedence (convention)
        -:   20:    }
        -:   21:}
        -:   22:
        -:   23:// Function to convert infix expression to postfix
function infix_to_postfix called 1 returned 100% blocks executed 89%
        1:   24:void infix_to_postfix(char* infix, char* postfix) {
        -:   25:    Stack stack;  // Declare a stack object for operator manipulation
        1:   26:    stack.top = NULL;  // Initialize stack to be empty (top pointer points to NULL)
        -:   27:
        1:   28:    int i = 0, j = 0;  // Indexes for infix and postfix strings
        -:   29:
        7:   30:    while (infix[i] != '\0') { // Loop until null terminator in infix string
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:   31:        if (isdigit(infix[i])) {  // Check if current character is a digit
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   32:            postfix[j++] = infix[i++];  // Copy digit to postfix and increment both indexes
        4:   33:        } else if (infix[i] == '(') {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   34:            push(&stack, infix[i++]);  // Push '(' onto the stack and increment index
call    0 returned 100%
        3:   35:        } else if (infix[i] == ')') {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   36:            while (!is_empty(&stack) && peek(&stack) != '(') {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
        -:   37:                // Pop operators from stack until encountering '(' and append them to postfix
        1:   38:                postfix[j++] = pop(&stack);
call    0 returned 100%
        -:   39:            }
        1:   40:            pop(&stack); // Discard '(' from stack
call    0 returned 100%
        1:   41:            i++;  // Increment index after processing closing parenthesis
        2:   42:        } else if (is_operator(infix[i])) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:   43:            while (!is_empty(&stack) && precedence(peek(&stack)) >= precedence(infix[i])) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
        -:   44:                // Pop operators with higher or equal precedence from stack and append to postfix
    #####:   45:                postfix[j++] = pop(&stack);
call    0 never executed
        -:   46:            }
        1:   47:            push(&stack, infix[i++]);  // Push current operator onto the stack and increment index
call    0 returned 100%
        -:   48:        } else {
        -:   49:            // Ignore other characters like spaces (optional handling)
        1:   50:            i++;
        -:   51:        }
        -:   52:    }
        -:   53:
        -:   54:    // Pop remaining operators from stack after processing infix string
        1:   55:    while (!is_empty(&stack)) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
    #####:   56:        postfix[j++] = pop(&stack);
call    0 never executed
        -:   57:    }
        -:   58:
        1:   59:    postfix[j] = '\0';  // Add null terminator to mark the end of the postfix string
        1:   60:}
        -:   61:
        -:   62:// Function to evaluate postfix expression
function evaluate_postfix called 1 returned 100% blocks executed 71%
        1:   63:int evaluate_postfix(char* postfix) {
        -:   64:    Stack stack;  // Declare a stack object for operand manipulation
        1:   65:    stack.top = NULL;  // Initialize stack to be empty
        -:   66:
        1:   67:    int i = 0;  // Index for postfix string
        -:   68:
        4:   69:    while (postfix[i] != '\0') { // Loop until null terminator in postfix string
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   70:        if (isdigit(postfix[i])) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   71:            push(&stack, postfix[i] - '0'); // Convert digit character to integer value and push onto stack
call    0 returned 100%
        1:   72:        } else if (is_operator(postfix[i])) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   73:            int operand2 = pop(&stack);  // Pop the second operand from the stack
call    0 returned 100%
        1:   74:            int operand1 = pop(&stack);  // Pop the first operand from the stack
call    0 returned 100%
        1:   75:            switch (postfix[i]) {
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
    #####:   76:                case '+':
    #####:   77:                    push(&stack, operand1 + operand2);  // Perform addition and push result onto stack
call    0 never executed
    #####:   78:                    break;
    #####:   79:                case '-':
    #####:   80:                    push(&stack, operand1 - operand2);  // Perform subtraction and push result onto stack
call    0 never executed
    #####:   81:                    break;
        1:   82:                case '*':
        1:   83:                    push(&stack, operand1 * operand2);  // Perform multiplication and push result onto stack
call    0 returned 100%
        1:   84:                    break;
    #####:   85:                case '/':
    #####:   86:                    push(&stack, operand1 / operand2);  // Perform division and push result onto stack
call    0 never executed
    #####:   87:                    break;
        -:   88:            }
        -:   89:        }
        3:   90:        i++;  // Increment index after processing the current character
        -:   91:    }
        -:   92:
        1:   93:    return pop(&stack);  // The final element on the stack is the result of the expression
call    0 returned 100%
        -:   94:}
