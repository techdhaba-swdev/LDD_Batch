        -:    0:Source:file_system.c
        -:    1:#include "file_system.h" // Including header file for file system functionality
        -:    2:#include <stdio.h> // Including standard input-output library
        -:    3:#include <stdlib.h> // Including standard library for memory allocation and other functions
        -:    4:#include <string.h> // Including string manipulation functions
        -:    5:
        -:    6:// Global variables for root directory and current directory
        -:    7:Directory* rootDirectory = NULL; // Declaration and initialization of root directory pointer
        -:    8:Directory* currentDirectory = NULL; // Declaration and initialization of current directory pointer
        -:    9:
function initializeFileSystem called 1 returned 100% blocks executed 100%
        1:   10:void initializeFileSystem() {
        1:   11:    rootDirectory = (Directory*)malloc(sizeof(Directory)); // Allocating memory for root directory
        1:   12:    rootDirectory->name = strdup("root"); // Setting name of root directory
        1:   13:    rootDirectory->parent = NULL; // Setting parent directory of root directory to NULL
        1:   14:    rootDirectory->subdirectories = NULL; // Setting subdirectories of root directory to NULL
        1:   15:    rootDirectory->files = NULL; // Setting files in root directory to NULL
        1:   16:    rootDirectory->next = NULL; // Setting next directory pointer to NULL
        1:   17:    currentDirectory = rootDirectory; // Setting current directory to root directory
        1:   18:}
        -:   19:
function createDirectory called 2 returned 100% blocks executed 86%
        2:   20:void createDirectory(const char* name) {
        2:   21:    Directory* newDirectory = (Directory*)malloc(sizeof(Directory)); // Allocating memory for new directory
        2:   22:    newDirectory->name = strdup(name); // Setting name of new directory
        2:   23:    newDirectory->parent = currentDirectory; // Setting parent directory of new directory
        2:   24:    newDirectory->subdirectories = NULL; // Setting subdirectories of new directory to NULL
        2:   25:    newDirectory->files = NULL; // Setting files in new directory to NULL
        2:   26:    newDirectory->next = NULL; // Setting next directory pointer to NULL
        -:   27:
        2:   28:    if (currentDirectory->subdirectories == NULL) { // Checking if current directory has no subdirectories
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   29:        currentDirectory->subdirectories = newDirectory; // Setting new directory as the first subdirectory
        -:   30:    } else { // If current directory has existing subdirectories
        1:   31:        Directory* temp = currentDirectory->subdirectories; // Temporary pointer to traverse existing subdirectories
        1:   32:        while (temp->next != NULL) { // Looping until last subdirectory is reached
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   33:            temp = temp->next; // Moving to next subdirectory
        -:   34:        }
        1:   35:        temp->next = newDirectory; // Adding new directory to the end of subdirectories list
        -:   36:    }
        2:   37:}
        -:   38:
function createFile called 3 returned 100% blocks executed 86%
        3:   39:void createFile(const char* name, int size) {
        3:   40:    File* newFile = (File*)malloc(sizeof(File)); // Allocating memory for new file
        3:   41:    newFile->name = strdup(name); // Setting name of new file
        3:   42:    newFile->size = size; // Setting size of new file
        3:   43:    newFile->next = NULL; // Setting next file pointer to NULL
        -:   44:
        3:   45:    if (currentDirectory->files == NULL) { // Checking if current directory has no files
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   46:        currentDirectory->files = newFile; // Setting new file as the first file in directory
        -:   47:    } else { // If current directory has existing files
        1:   48:        File* temp = currentDirectory->files; // Temporary pointer to traverse existing files
        1:   49:        while (temp->next != NULL) { // Looping until last file is reached
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   50:            temp = temp->next; // Moving to next file
        -:   51:        }
        1:   52:        temp->next = newFile; // Adding new file to the end of files list
        -:   53:    }
        3:   54:}
        -:   55:
function viewDirectoryContents called 3 returned 100% blocks executed 100%
        3:   56:void viewDirectoryContents(const char* directoryName) {
        3:   57:    Directory* temp = currentDirectory->subdirectories; // Temporary pointer to traverse subdirectories
        5:   58:    while (temp != NULL) { // Looping through subdirectories
branch  0 taken 40%
branch  1 taken 60% (fallthrough)
        2:   59:        printf("Directory: %s\n", temp->name); // Printing name of each subdirectory
call    0 returned 100%
        2:   60:        temp = temp->next; // Moving to next subdirectory
        -:   61:    }
        -:   62:
        3:   63:    File* fileTemp = currentDirectory->files; // Temporary pointer to traverse files
        7:   64:    while (fileTemp != NULL) { // Looping through files
branch  0 taken 57%
branch  1 taken 43% (fallthrough)
        4:   65:        printf("File: %s, Size: %d\n", fileTemp->name, fileTemp->size); // Printing name and size of each file
call    0 returned 100%
        4:   66:        fileTemp = fileTemp->next; // Moving to next file
        -:   67:    }
        3:   68:}
        -:   69:
function navigateIntoDirectory called 1 returned 100% blocks executed 71%
        1:   70:void navigateIntoDirectory(const char* directoryName) {
        1:   71:    Directory* temp = currentDirectory->subdirectories; // Temporary pointer to traverse subdirectories
        1:   72:    while (temp != NULL) { // Looping through subdirectories
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        1:   73:        if (strcmp(temp->name, directoryName) == 0) { // Checking if directory name matches
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   74:            currentDirectory = temp; // Changing current directory to matched directory
        1:   75:            return; // Exiting function
        -:   76:        }
    #####:   77:        temp = temp->next; // Moving to next subdirectory
        -:   78:    }
    #####:   79:    printf("Directory not found.\n"); // Printing message if directory not found
call    0 never executed
        -:   80:}
        -:   81:
function deleteFile called 1 returned 100% blocks executed 60%
        1:   82:void deleteFile(const char* fileName) {
        1:   83:    File* temp = currentDirectory->files; // Temporary pointer to traverse files
        1:   84:    File* prev = NULL; // Pointer to track previous file in list
        2:   85:    while (temp != NULL) { // Looping through files
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   86:        if (strcmp(temp->name, fileName) == 0) { // Checking if file name matches
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   87:            if (prev == NULL) { // If file to be deleted is the first file in list
branch  0 never executed
branch  1 never executed
    #####:   88:                currentDirectory->files = temp->next; // Update files list to skip first file
        -:   89:            } else { // If file to be deleted is not the first file in list
    #####:   90:                prev->next = temp->next; // Adjusting previous file's next pointer to skip deleted file
        -:   91:            }
    #####:   92:            free(temp->name); // Freeing memory allocated for file name
    #####:   93:            free(temp); // Freeing memory allocated for file structure
    #####:   94:            return; // Exiting function
        -:   95:        }
        1:   96:        prev = temp; // Moving previous pointer to current file
        1:   97:        temp = temp->next; // Moving to next file
        -:   98:    }
        1:   99:    printf("File not found.\n"); // Printing message if file not found
call    0 returned 100%
        -:  100:}
        -:  101:
function deleteDirectory called 0 returned 0% blocks executed 0%
    #####:  102:void deleteDirectory(const char* directoryName) {
    #####:  103:    Directory* temp = currentDirectory->subdirectories; // Temporary pointer to traverse subdirectories
    #####:  104:    Directory* prev = NULL; // Pointer to track previous directory in list
    #####:  105:    while (temp != NULL) { // Looping through subdirectories
branch  0 never executed
branch  1 never executed
    #####:  106:        if (strcmp(temp->name, directoryName) == 0) { // Checking if directory name matches
branch  0 never executed
branch  1 never executed
    #####:  107:            if (prev == NULL) { // If directory to be deleted is the first directory in list
branch  0 never executed
branch  1 never executed
    #####:  108:                currentDirectory->subdirectories = temp->next; // Update subdirectories list to skip first directory
        -:  109:            } else { // If directory to be deleted is not the first directory in list
    #####:  110:                prev->next = temp->next; // Adjusting previous directory's next pointer to skip deleted directory
        -:  111:            }
    #####:  112:            free(temp->name); // Freeing memory allocated for directory name
    #####:  113:            free(temp); // Freeing memory allocated for directory structure
    #####:  114:            return; // Exiting function
        -:  115:        }
    #####:  116:        prev = temp; // Moving previous pointer to current directory
    #####:  117:        temp = temp->next; // Moving to next directory
        -:  118:    }
    #####:  119:    printf("Directory not found.\n"); // Printing message if directory not found
call    0 never executed
        -:  120:}
        -:  121:
function searchFile called 1 returned 100% blocks executed 75%
        1:  122:void searchFile(const char* fileName) {
        1:  123:    File* temp = currentDirectory->files; // Temporary pointer to traverse files
        2:  124:    while (temp != NULL) { // Looping through files
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  125:        if (strcmp(temp->name, fileName) == 0) { // Checking if file name matches
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  126:            printf("File found: %s, Size: %d\n", temp->name, temp->size); // Printing name and size of file
call    0 never executed
    #####:  127:            return; // Exiting function
        -:  128:        }
        1:  129:        temp = temp->next; // Moving to next file
        -:  130:    }
        1:  131:    printf("File not found.\n"); // Printing message if file not found
call    0 returned 100%
        -:  132:}
