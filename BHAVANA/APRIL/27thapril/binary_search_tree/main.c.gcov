        -:    0:Source:main.c
        -:    1:#include <stdio.h>
        -:    2:#include "bst.h" // Include the header file for BST functions
        -:    3:
function main called 1 returned 100% blocks executed 96%
        1:    4:int main() {
        1:    5:    struct node* root = NULL; // Declare a pointer to the root node and initialize it to NULL
        1:    6:    root = insert(root, 50); // Insert nodes into the BST
call    0 returned 100%
        1:    7:    insert(root, 30);
call    0 returned 100%
        1:    8:    insert(root, 20);
call    0 returned 100%
        1:    9:    insert(root, 40);
call    0 returned 100%
        1:   10:    insert(root, 70);
call    0 returned 100%
        1:   11:    insert(root, 60);
call    0 returned 100%
        1:   12:    insert(root, 80);
call    0 returned 100%
        -:   13:
        1:   14:    printf("In-order traversal of the BST: ");
call    0 returned 100%
        1:   15:    inorderTraversal(root); // Perform an in-order traversal of the BST
call    0 returned 100%
        1:   16:    printf("\n");
call    0 returned 100%
        -:   17:
        1:   18:    int searchData = 30;
        1:   19:    if (search(root, searchData)) { // Search for a node in the BST
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   20:        printf("%d found in the BST\n", searchData);
call    0 returned 100%
        -:   21:    } else {
    #####:   22:        printf("%d not found in the BST\n", searchData);
call    0 never executed
        -:   23:    }
        -:   24:
        1:   25:    printf("Minimum value in the BST: %d\n", findMin(root)); // Find the minimum value in the BST
call    0 returned 100%
call    1 returned 100%
        1:   26:    printf("Maximum value in the BST: %d\n", findMax(root)); // Find the maximum value in the BST
call    0 returned 100%
call    1 returned 100%
        1:   27:    printf("Height of the BST: %d\n", height(root)); // Calculate the height of the BST
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:    // Deleting node 30 for testing deletion
        1:   30:    root = deleteNode(root, 30);
call    0 returned 100%
        1:   31:    printf("In-order traversal of the BST after deleting 30: ");
call    0 returned 100%
        1:   32:    inorderTraversal(root);
call    0 returned 100%
        1:   33:    printf("\n");
call    0 returned 100%
        -:   34:
        1:   35:    return 0;
        -:   36:}
