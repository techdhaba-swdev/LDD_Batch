        -:    0:Source:queue.c
        -:    1:#include "queue.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:// Function to create an empty queue
function createQueue called 1 returned 100% blocks executed 100%
        1:    6:Queue* createQueue() {
        1:    7:    Queue* queue = (Queue*)malloc(sizeof(Queue));
        1:    8:    if (queue != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:    9:        queue->front = NULL;
        1:   10:        queue->rear = NULL;
        -:   11:    }
        1:   12:    return queue;
        -:   13:}
        -:   14:
        -:   15:// Function to add an element to the rear of the queue
function enqueue called 4 returned 100% blocks executed 83%
        4:   16:void enqueue(Queue* queue, int data) {
        4:   17:    Node* newNode = (Node*)malloc(sizeof(Node));
        4:   18:    if (newNode != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   19:        newNode->data = data;
        4:   20:        newNode->next = NULL;
        4:   21:        if (queue->rear == NULL) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   22:            queue->front = newNode;
        1:   23:            queue->rear = newNode;
        -:   24:        } else {
        3:   25:            queue->rear->next = newNode;
        3:   26:            queue->rear = newNode;
        -:   27:        }
        -:   28:    } else {
    #####:   29:        printf("Memory allocation failed.\n");
call    0 never executed
        -:   30:    }
        4:   31:}
        -:   32:
        -:   33:// Function to remove and return the element at the front of the queue
function dequeue called 4 returned 100% blocks executed 75%
        4:   34:int dequeue(Queue* queue) {
        4:   35:    if (isEmpty(queue)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   36:        printf("Queue is empty.\n");
call    0 never executed
    #####:   37:        return -1;
        -:   38:    }
        4:   39:    int data = queue->front->data;
        4:   40:    Node* temp = queue->front;
        4:   41:    queue->front = queue->front->next;
        4:   42:    free(temp);
        4:   43:    if (queue->front == NULL) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   44:        queue->rear = NULL;
        -:   45:    }
        4:   46:    return data;
        -:   47:}
        -:   48:
        -:   49:// Function to check if the queue is empty
function isEmpty called 9 returned 100% blocks executed 100%
        9:   50:bool isEmpty(Queue* queue) {
        9:   51:    return queue->front == NULL;
        -:   52:}
        -:   53:
