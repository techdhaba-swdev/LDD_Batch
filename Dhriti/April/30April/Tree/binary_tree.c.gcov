        -:    0:Source:binary_tree.c
        -:    1:#include "binary_tree.h"
        -:    2:#include<stdio.h>
        -:    3:
        -:    4:
        -:    5:
        -:    6:// Function to insert a node into the binary tree
       17:    7:struct Node* insert(struct Node* root, int data) {
        -:    8:    // Base case: Empty tree, create a new root node
       17:    9:    if (root == NULL) {
        7:   10:        return createNode(data);
        -:   11:    }
        -:   12:
        -:   13:    // If the data is less than the root node, insert into the left subtree
       10:   14:    if (data < root->data) {
        5:   15:        root->left = insert(root->left, data);
        -:   16:    }
        -:   17:    // If the data is greater than the root node, insert into the right subtree
        5:   18:    else if (data > root->data) {
        5:   19:        root->right = insert(root->right, data);
        -:   20:    }
        -:   21:    // Handle duplicates (optional)
        -:   22:    else {
        -:   23:        // printf("Duplicate value: %d\n", data);
        -:   24:    }
        -:   25:
        -:   26:    // Return the (potentially modified) root node
       10:   27:    return root;
        -:   28:}
        -:   29:
        -:   30:// Function to perform in-order traversal of the binary tree
       15:   31:void inOrder(struct Node* root) {
        -:   32:    // Base case: If the root is not NULL
       15:   33:    if (root != NULL) {
        -:   34:        // Visit left subtree
        7:   35:        inOrder(root->left);
        -:   36:        // Visit current node
        7:   37:        printf("%d ", root->data);
        -:   38:        // Visit right subtree
        7:   39:        inOrder(root->right);
        -:   40:    }
       15:   41:}
        -:   42:
