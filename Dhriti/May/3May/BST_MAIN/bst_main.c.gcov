        -:    0:Source:bst_main.c
        -:    1:#include "bst_main.h"
        -:    2:
        1:    3:int main() {
        -:    4:	
        1:    5:    struct Node* root = NULL; //  the root node to NULL
        -:    6:    
        1:    7:    clock_t start = clock();
        1:    8:    root = insert(root, 15);   // Insert nodes into the tree
        1:    9:    insert(root, 13);
        1:   10:    insert(root, 12);
        1:   11:    insert(root, 14);
        1:   12:    insert(root, 17);
        1:   13:    insert(root, 16);
        1:   14:    insert(root, 18);
        -:   15:    
        -:   16:    // Stop the clock
        1:   17:    clock_t end = clock();
        -:   18:
        -:   19:    // Calculate the elapsed time
        1:   20:    double time_taken = ((double)(end - start));
        -:   21:
        -:   22:
        1:   23:    printf("In order traversal: ");
        -:   24:    
        1:   25:    printf("Time taken: %f seconds\n", time_taken);
        1:   26:    inOrderTraversal(root);  // Performing in-order traversal and printing the nodes
        1:   27:    printf("\n");
        -:   28:
        1:   29:    printf("Height of BST: %d\n", height(root));  // Calculate the height of the binary tree and then print
        -:   30:
        1:   31:    int min = INT_MAX;  // Initialize min to the maximum possible output
        1:   32:    int max = INT_MIN;  // Initialize max to the minimum possible output
        1:   33:    MinMax(root, &min, &max);  // Find the minimum and maximum values in the binary tree
        1:   34:    printf("Minimum value in BST: %d\n", min);  // Print the minimum value
        1:   35:    printf("Maximum value in BST: %d\n", max);  // Print the maximum value
        -:   36:
       1*:   37:    printf("Is BST: %s\n", isBST(root)? "Yes" : "No");  // Check if the binary tree is a BST and print the result
        -:   38:
        1:   39:    root = deletion(root, 12);  // Delete a node from the binary tree
        1:   40:    printf("In-order traversal after deletion: ");
        1:   41:    inOrderTraversal(root);  //  print the nodes after deletion
        1:   42:    printf("\n");
        -:   43:
        1:   44:    return 0; 
        -:   45:}
