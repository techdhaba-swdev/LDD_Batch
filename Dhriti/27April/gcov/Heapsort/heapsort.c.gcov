        -:    0:Source:heapsort.c
        -:    1:#include <stdio.h>
        -:    2:#include "heapsort.h"
        -:    3:
        -:    4:// Function to heapify a subtree rooted at index i in the array arr of size n
       13:    5:void heapify(int arr[], int n, int i) {
       13:    6:    int largest = i; // Initialize largest as root
       13:    7:    int left = 2 * i + 1; // Left child
       13:    8:    int right = 2 * i + 2; // Right child
        -:    9:
        -:   10:    // If left child is larger than root
       13:   11:    if (left < n && arr[left] > arr[largest])
        4:   12:        largest = left;
        -:   13:
        -:   14:    // If right child is larger than largest so far
       13:   15:    if (right < n && arr[right] > arr[largest])
        3:   16:        largest = right;
        -:   17:
        -:   18:    // If largest is not root
       13:   19:    if (largest != i) {
        -:   20:        // Swap arr[i] and arr[largest]
        5:   21:        int temp = arr[i];
        5:   22:        arr[i] = arr[largest];
        5:   23:        arr[largest] = temp;
        -:   24:
        -:   25:        // Recursively heapify the affected sub-tree
        5:   26:        heapify(arr, n, largest);
        -:   27:    }
       13:   28:}
        -:   29:
        -:   30:// Main function to perform heap sort
        1:   31:void heapSort(int arr[], int n) {
        -:   32:    // Build heap (rearrange array)
        4:   33:    for (int i = n / 2 - 1; i >= 0; i--)
        3:   34:        heapify(arr, n, i);
        -:   35:
        -:   36:    // Extract elements from heap one by one
        6:   37:    for (int i = n - 1; i > 0; i--) {
        -:   38:        // Move current root to end
        5:   39:        int temp = arr[0];
        5:   40:        arr[0] = arr[i];
        5:   41:        arr[i] = temp;
        -:   42:
        -:   43:        // Call max heapify on the reduced heap
        5:   44:        heapify(arr, i, 0);
        -:   45:    }
        1:   46:}
        -:   47:
        -:   48:// Function to print an array
        -:   49:// Function to print an array
        2:   50:void printArray(int arr[], int n) {
       14:   51:    for (int i = 0; i < n; ++i) {
       12:   52:        if (i > 0 && i % 10 == 0) // Securence by Limiting output to 10 elements per line
    #####:   53:            printf("\n");
        -:   54:        
       12:   55:        printf("%d ", arr[i]);
        -:   56:    }
        2:   57:    printf("\n");
        2:   58:}
        -:   59:
        -:   60:
        -:   61:
