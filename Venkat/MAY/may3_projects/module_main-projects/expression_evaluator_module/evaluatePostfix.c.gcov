        -:    0:Source:evaluatePostfix.c
        -:    1:// evaluatePostfix.c 
        -:    2:#include <stdio.h>
        -:    3:#include "evaluatePostfix.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <ctype.h>
        -:    7:#include "createStack.h"
        -:    8:#include "push.h"
        -:    9:#include "pop.h"
        -:   10:#include "isEmpty.h"
        -:   11:// Function to evaluate a postfix expression
function evaluatePostfix called 1 returned 100% blocks executed 74%
        1:   12:int evaluatePostfix(char postfix[]) {
        1:   13:    Stack* stack = createStack(); // Create a stack to hold operands
call    0 returned 100%
        1:   14:    char *token = strtok(postfix, " "); // Tokenize the postfix expression
call    0 returned 100%
        -:   15:
        -:   16:    // Iterate over each token in the postfix expression
       10:   17:    while (token != NULL) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9:   18:        if (isdigit(token[0])) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:   19:            // If token is an operand, push it onto the stack
        5:   20:            push(stack, atoi(token));
call    0 returned 100%
        -:   21:        } else {
        -:   22:            // If token is an operator, pop two operands, perform operation, and push result
        4:   23:            int operand2 = pop(stack);
call    0 returned 100%
        4:   24:            int operand1 = pop(stack);
call    0 returned 100%
        -:   25:            int result;
        -:   26:
        4:   27:            switch (token[0]) {
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 0%
    #####:   28:                case '+': result = operand1 + operand2; break;
        2:   29:                case '-': result = operand1 - operand2; break;
        1:   30:                case '*': result = operand1 * operand2; break;
        1:   31:                case '/':
        1:   32:                    if (operand2 == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:                        printf("Error: Division by zero\n");
call    0 never executed
    #####:   34:                        exit(EXIT_FAILURE);
call    0 never executed
        -:   35:                    }
        1:   36:                    result = operand1 / operand2;
        1:   37:                    break;
    #####:   38:                default:
    #####:   39:                    printf("Error: Invalid operator %c\n", token[0]);
call    0 never executed
    #####:   40:                    exit(EXIT_FAILURE);
call    0 never executed
        -:   41:            }
        4:   42:            push(stack, result); // Push the result back onto the stack
call    0 returned 100%
        -:   43:        }
        9:   44:        token = strtok(NULL, " "); // Move to the next token
call    0 returned 100%
        -:   45:    }
        -:   46:
        1:   47:    int finalResult = pop(stack); // Pop the final result from the stack
call    0 returned 100%
        -:   48:
        1:   49:    if (!isEmpty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   50:        printf("Error: Stack not empty after evaluation\n");
call    0 never executed
    #####:   51:        exit(EXIT_FAILURE);
call    0 never executed
        -:   52:    }
        -:   53:
        1:   54:    free(stack); // Free the stack memory
        1:   55:    return finalResult; // Return the final result of the expression
        -:   56:}
