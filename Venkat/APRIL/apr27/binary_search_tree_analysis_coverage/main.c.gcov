        -:    0:Source:main.c
        -:    1:#include "bst.h"
        -:    2:#include <stdio.h>
        -:    3:
function main called 1 returned 100% blocks executed 94%
        1:    4:int main() {
        1:    5:    struct node* root = NULL;
        1:    6:    root = insert(root, 50);
call    0 returned 100%
        1:    7:    insert(root, 30);
call    0 returned 100%
        1:    8:    insert(root, 20);
call    0 returned 100%
        1:    9:    insert(root, 40);
call    0 returned 100%
        1:   10:    insert(root, 70);
call    0 returned 100%
        1:   11:    insert(root, 60);
call    0 returned 100%
        1:   12:    insert(root, 80);
call    0 returned 100%
        -:   13:
        1:   14:    printf("In-order traversal of the BST: ");
call    0 returned 100%
        1:   15:    inorderTraversal(root);
call    0 returned 100%
        1:   16:    printf("\n");
call    0 returned 100%
        -:   17:
        1:   18:    int searchData = 60;
        1:   19:    if (search(root, searchData)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   20:        printf("%d found in the BST.\n", searchData);
call    0 returned 100%
        -:   21:    } else {
    #####:   22:        printf("%d not found in the BST.\n", searchData);
call    0 never executed
        -:   23:    }
        -:   24:
        -:   25:    
        1:   26:      freeTree(root);// free up allocated memory to prevent from memory leaks
call    0 returned 100%
        1:   27:      root = NULL;   // ensure root pointer is not dangling pointer,so assigned to null 
        -:   28:
        1:   29:    return 0;
        -:   30:}
