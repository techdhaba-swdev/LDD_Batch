        -:    0:Source:binarysearch.c
        -:    1:#include "binarysearch.h"
function binarysearch called 1 returned 100% blocks executed 50%
        1:    2:int binarysearch(int arr[],int target){
        1:    3:    int start =0;
        -:    4:    //int end =sizeof(arr)/sizeof(arr[0])-1;
        1:    5:    int end = 8;
        1:    6:    while(start<=end){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:    7:        // int mid = (start+end)/2 //if the int number is large may exists integer it may surppass int value it prevents int out of bound
        1:    8:        int mid = start + (end-start)/2;
        1:    9:	if(target == arr[mid]) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   10:		return mid;
        -:   11:                  }
    #####:   12:        else if(target <arr[mid]){
branch  0 never executed
branch  1 never executed
    #####:   13:                end = mid-1 ;
        -:   14:        }
        -:   15:        else {
    #####:   16:            start = mid+1;
        -:   17:        }
    #####:   18:        return -1; // target is not found
        -:   19:    
        -:   20:    }
        -:   21:
    #####:   22:}
