        -:    0:Source:socialapi.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include "network.h"
        -:    4:#include <stdbool.h>
        -:    5:
function add_user called 3 returned 100% blocks executed 60%
        3:    6:void add_user(Graph *graph, const char *name, const char *interests) {
        3:    7:    if (graph->num_users >= MAX_USERS) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:    8:    {
    #####:    9:        printf("Cannot add more users.\n");
call    0 never executed
    #####:   10:        return;
        -:   11:    }
        3:   12:    User *user = &graph->users[graph->num_users++];
        3:   13:    strcpy(user->name, name);
        3:   14:    strcpy(user->interests, interests);
        3:   15:    user->num_friends = 0;
        -:   16:}
function add_friend called 2 returned 100% blocks executed 100%
        2:   17:void add_friend(Graph *graph, const char *user1_name, const char *user2_name) 
        -:   18:{
        2:   19:    User *user1 = NULL, *user2 = NULL;
        8:   20:    for (int i = 0; i < graph->num_users; i++) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   21:    {
        6:   22:        if (strcmp(graph->users[i].name, user1_name) == 0) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   23:	{
        2:   24:            user1 = &graph->users[i];
        -:   25:        }
        6:   26:        if (strcmp(graph->users[i].name, user2_name) == 0) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   27:	{
        2:   28:            user2 = &graph->users[i];
        -:   29:        }
        -:   30:    }
        2:   31:    if (user1 && user2) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   32:    {
        2:   33:        user1->friends[user1->num_friends++] = user2;
        2:   34:        user2->friends[user2->num_friends++] = user1;
        -:   35:    }
        2:   36:}
        -:   37:
function search_by_name called 1 returned 100% blocks executed 100%
        1:   38:void search_by_name(Graph *graph, const char *name) 
        -:   39:{
        1:   40:    printf("Users with name '%s': ", name);
call    0 returned 100%
        4:   41:    for (int i = 0; i < graph->num_users; i++) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   42:    {
        3:   43:        if (strstr(graph->users[i].name, name)) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   44:	{
        1:   45:            printf("%s\n", graph->users[i].name);
call    0 returned 100%
        -:   46:        }
        -:   47:    }
        1:   48:}
        -:   49:
function search_by_interest called 1 returned 100% blocks executed 100%
        1:   50:void search_by_interest(Graph *graph, const char *interest) 
        -:   51:{
        1:   52:    printf("Users interested in '%s': \n", interest);
call    0 returned 100%
        4:   53:    for (int i = 0; i < graph->num_users; i++) 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   54:    {
        3:   55:        if (strstr(graph->users[i].interests, interest)) 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:   56:	{
        2:   57:            printf("%s\n", graph->users[i].name);
call    0 returned 100%
        -:   58:        }
        -:   59:    }
        1:   60:}
        -:   61:
function recommend_friends called 1 returned 100% blocks executed 94%
        1:   62:void recommend_friends(Graph *graph, const char *name) 
        -:   63:{
        1:   64:    printf("Recommended friends for %s : ", name);
call    0 returned 100%
       1*:   65:    for (int i = 0; i < graph->num_users; i++) 
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   66:    {
        1:   67:        if (strcmp(graph->users[i].name, name) == 0) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   68:	{
        1:   69:            User *user = &graph->users[i];
        2:   70:            for (int j = 0; j < user->num_friends; j++) 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   71:	    {
        1:   72:                User *friend = user->friends[j];
        3:   73:                for (int k = 0; k < friend->num_friends; k++) 
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   74:		{
        2:   75:                    User *potential_friend = friend->friends[k];
        2:   76:                    if (strcmp(potential_friend->name, name) != 0 && !is_friend_of_user(user, potential_friend)) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   77:		    {
        1:   78:                        printf("%s\n", potential_friend->name);
call    0 returned 100%
        -:   79:                    }
        -:   80:                }
        -:   81:            }
        1:   82:            break;
        -:   83:        }
        -:   84:    }
        1:   85:}
function is_friend_of_user called 1 returned 100% blocks executed 86%
        1:   86:bool is_friend_of_user(User *user, User *potential_friend) 
        -:   87:{
        2:   88:    for (int i = 0; i < user->num_friends; i++) 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   89:    {
        1:   90:        if (user->friends[i] == potential_friend) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   91:	{
    #####:   92:            return true;
        -:   93:        }
        -:   94:    }
        1:   95:    return false;
        -:   96:}
        -:   97:
