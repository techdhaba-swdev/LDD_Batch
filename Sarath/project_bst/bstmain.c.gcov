        -:    0:Source:bstmain.c
        -:    1://INCLUDING HEADER FILES
        -:    2:
        -:    3:#include<stdio.h>
        -:    4:#include<time.h>
        -:    5:#include"bst.h"
        -:    6:
        -:    7://CREATED A STRUCTURE TO STORE DATA AND LEFT,RIGHT POINTERS FOR CONNECTION BETWEEN NODES
        -:    8:struct node 
        -:    9:{
        -:   10:	int data;
        -:   11:	struct node *left;
        -:   12:	struct node *right;
        -:   13:};
function main called 1 returned 100% blocks executed 98%
        1:   14:int main()
        -:   15:{
        -:   16:	int ele;
        1:   17:	clock_t start=clock(); //CALCULATING START TIME USING CLOCK() 
call    0 returned 100%
        1:   18:	struct node *root=NULL; //INITIALIZING ROOT NODE WITH NULL
        -:   19:	//INSERTING NODES TO BINARYSEARCH TREE USING INSERT API
        1:   20:	root=insert(root,50); 
call    0 returned 100%
        1:   21:	insert(root,30);
call    0 returned 100%
        1:   22:	insert(root,20);
call    0 returned 100%
        1:   23:	insert(root,40);
call    0 returned 100%
        1:   24:	insert(root,70);
call    0 returned 100%
        1:   25:	insert(root,60);
call    0 returned 100%
        1:   26:	insert(root,80);
call    0 returned 100%
        1:   27:	printf("BINARY TREE USING INORDER TRAVERSING :"); //PRINTING BINARYSEARCH TREE 
call    0 returned 100%
        1:   28:	inordertraversal(root); //USING INORDERTRAVERSAL API TRAVERSING THROUGH THE TREE AND PRINTING EACH ELEMENT
call    0 returned 100%
        1:   29:	printf("\n");
call    0 returned 100%
        1:   30:	printf("BINARY TREE USING PRE :"); //PRINTING BINARYSEARCH TREE 
call    0 returned 100%
        1:   31:        preorder(root); //USING PREORDER API TRAVERSING THROUGH THE TREE AND PRINTING EACH ELEMENT
call    0 returned 100%
        1:   32:        printf("\n");
call    0 returned 100%
        1:   33:	printf("BINARY TREE USING POSTORDER :"); //PRINTING BINARYSEARCH TREE 
call    0 returned 100%
        1:   34:        postorder(root); //USING POSTORDER API TRAVERSING THROUGH THE TREE AND PRINTING EACH ELEMENT
call    0 returned 100%
        1:   35:        printf("\n");
call    0 returned 100%
        1:   36:	int h=height(root);
call    0 returned 100%
        1:   37:	printf("Height of tree is : %d",h);
call    0 returned 100%
        1:   38:	printf("\n");
call    0 returned 100%
        1:   39:	int c=count(root);
call    0 returned 100%
        1:   40:	printf("NUMBER OF NODES : %d",c);
call    0 returned 100%
        1:   41:	printf("\n");
call    0 returned 100%
        1:   42:	printf("Enter element to find:");
call    0 returned 100%
        1:   43:	scanf("%d",&ele); //TAKING FROM USER WHICH ELEMENT TO FIND
call    0 returned 100%
        1:   44:	if (search(root, ele) != NULL) //PERFORMED SEARCH OPERATION TO FIND REQUIRED ELEMENT FROM USER
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   45:        {
        1:   46:                printf("Yes,%d is found\n",ele);
call    0 returned 100%
        -:   47:        }
        -:   48:        else
        -:   49:        {
    #####:   50:                printf("OOPS!! %d not found\n",ele);
call    0 never executed
        -:   51:        }
        1:   52:        struct node* temp = delete (root, 70); //PERFORMED DELETE OPERATION TO DELETE REQUIRED ELEMENT FROM TREE
call    0 returned 100%
        -:   53:        
        1:   54:	printf("After Deleting Required Node : ");
call    0 returned 100%
        1:   55:        inordertraversal(root); //CALLING INORDERTRAVERSAL AFTER DELETING NODE AND PRINTINF THE TREE AGAIN
call    0 returned 100%
        1:   56:        printf("\n");
call    0 returned 100%
        -:   57:        
        1:   58:	int min=*(int *)find_min(root); //TYPECASTED THE fin_min API AS IT IS OF STRUCT TYPE
call    0 returned 100%
        1:   59:        printf("Minimum element in Tree : %d\n",min);
call    0 returned 100%
        -:   60:        
        1:   61:	int max=*(int *)find_max(root); //TYPECASTED THE fin_max API AS IT IS OF STRUCT TYPE
call    0 returned 100%
        1:   62:        printf("Maximum element in Tree: %d\n",max);
call    0 returned 100%
        -:   63:        
        1:   64:	int sum=calculatesum(root); //CALCULATING THE SUM OF ALL NODES USING CALCULATESUM API
call    0 returned 100%
        1:   65:        printf("Sum of elements is %d\n",sum);
call    0 returned 100%
        1:   66:        free(root); //FREEING THE ROOT AT THE END
        -:   67:        
        1:   68:	clock_t end=clock(); //ENDING THE CLOCK TIME
call    0 returned 100%
        1:   69:        double time_taken=((double)(end-start)); //CALCULATING THE TOTAL TIMETAKEN BY MACHINE
        1:   70:        printf("Time taken is %f\n",time_taken); //PRINTIGN THE TIME TAKEN BY MACHINE
call    0 returned 100%
        1:   71:    	return 0;
        -:   72:}
