        -:    0:Source:linkedlist.c
        -:    1:#include<stdio.h> //header file which has library functions like printf and scanf...
        -:    2:#include"linkedlist.h" //header file which we creaeted for our API's
        -:    3:#include<stdlib.h> //header file of standard library functions such as dynamic memory allocation malloc(),calloc()...
        -:    4:struct node //created a structure(defining)
        -:    5:{
        -:    6:	int data; //declared a variable which stores integer
        -:    7:	struct node *next; //created a pointer which points to structure for traversing
        -:    8:};
        -:    9:struct node *head=NULL;
function insert_at_start called 3 returned 100% blocks executed 100%
        3:   10:void insert_at_start(int data) //defined insertion at start API
        -:   11:{
        3:   12:        struct node *temp=malloc(sizeof(struct node));  //created a dynamic space to store data and named temp
        3:   13:        temp->data=data; //assigned data to  created pointer in before step
        3:   14:        if(head==NULL)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   15:        {
        1:   16:                head=temp; //as first element has no next node loop enters and assign temp into head
        1:   17:                return ;
        -:   18:        }
        2:   19:        temp->next=head; //from second push loop breaks every time as head is not null from second push
        -:   20:			//temp will store the head address
        2:   21:        head=temp; //so head will be reassigned to temp as this is insert at start API
        -:   22:
        -:   23:}
function insert_at_end called 2 returned 100% blocks executed 100%
        2:   24:void insert_at_end(int data) //defined insertion at end API
        -:   25:{
        2:   26:        struct node *temp=malloc(sizeof(struct node)); //created dynamic space using malloc and declared as temp
        2:   27:        struct node *ptr=head; //re initialising head for traversing throughout list
        2:   28:        temp->data=data; //assigning data into temp
        7:   29:        while(ptr->next!=NULL) 
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:   30:        {
        5:   31:                ptr=ptr->next; //loop rotates untill next node address will be NULL which is last node
        -:   32:        }
        2:   33:        ptr->next=temp; //when while loop breaks the temp will be locked into ptr
        2:   34:        temp->next=NULL; //making the last element next node address as NULL 
        2:   35:}
function print called 1 returned 100% blocks executed 100%
        1:   36:void print() //printed the sum of all elements of list using print() API
        -:   37:{
        1:   38:        struct node *ptr=head; //re initialised head with ptr for traversing through list
        1:   39:        int result=0; //declaring a variable named result to store sum and initially assigned zero
        1:   40:	printf("List elements:");
call    0 returned 100%
        6:   41:	while(ptr!=NULL) //loop functions untill last node as last node
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   42:	{
        5:   43:		result=result+ptr->data; //adding all the elements and assigned to result everytime
        5:   44:		printf("%d ",ptr->data); //printing every element of the list
call    0 returned 100%
        5:   45:		ptr=ptr->next; //so that everytime ptr will be updated to next node
        -:   46:	}
        1:   47:        printf("\nSum of list is %d\n",result); //printed the sum of list elements using printf library function
call    0 returned 100%
        1:   48:}
        -:   49:
