        -:    0:Source:binarysearchtreemain.c
        -:    1:#include<stdio.h>
        -:    2:#include"binarysearchtree.h"
function main called 1 returned 100% blocks executed 96%
        1:    3:int main()
        -:    4:{
        1:    5:    	struct node* root = NULL; //Initializing the root node
        -:    6:
        -:    7:    	// Inserting nodes into the binary search tree
        1:    8:    	root = insert(root, 50);
call    0 returned 100%
        1:    9:    	insert(root, 30);
call    0 returned 100%
        1:   10:    	insert(root, 20);
call    0 returned 100%
        1:   11:    	insert(root, 40);
call    0 returned 100%
        1:   12:    	insert(root, 70);
call    0 returned 100%
        1:   13:    	insert(root, 60);
call    0 returned 100%
        1:   14:    	insert(root, 80);
call    0 returned 100%
        1:   15:	printf("TREE :");
call    0 returned 100%
        1:   16:        inordertraversal(root); //traversing into the tree and pritning the elements
call    0 returned 100%
        1:   17:        printf("\n");
call    0 returned 100%
        -:   18:
        1:   19:    	if (search(root, 40) != NULL) //Perfromed search operation for node with data 40
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   20:	{
        1:   21:        	printf("Yes,40 is found\n");
call    0 returned 100%
        -:   22:    	}
        -:   23:    	else 
        -:   24:	{
    #####:   25:        	printf("OOPS!! 40 not found\n");
call    0 never executed
        -:   26:    	}
        1:   27:    	struct node* temp = delete (root, 70); //Performed delete operation to delete the 70 node
call    0 returned 100%
        1:   28:    	printf("After Deleting Node with data 70: ");
call    0 returned 100%
        1:   29:    	inordertraversal(root); //Called inordertraversal for traversing through tree
call    0 returned 100%
        1:   30:    	printf("\n");
call    0 returned 100%
        1:   31:   	int min=*(int *)find_min(root); //typecasted the find min function as it returns integer
call    0 returned 100%
        1:   32:   	printf("Minimum element in Tree : %d\n",min);
call    0 returned 100%
        1:   33:    	int max=*(int *)find_max(root); //typecasted the find max function as it returns integer
call    0 returned 100%
        1:   34:    	printf("Maximum element in Tree: %d\n",max);
call    0 returned 100%
        1:   35:	free(root); //Freeing up the root
        -:   36:
        1:   37:    return 0;
        -:   38:}
