        -:    0:Source:graph_struct_api.c
        -:    1:#include"graph_struct.h"
        -:    2:struct Node
        -:    3:{
        -:    4:  int vertex;
        -:    5:  struct Node* next;
        -:    6:};
        -:    7:// Structure to represent the graph
        -:    8:struct Graph
        -:    9:{
        -:   10:  int numVertices;
        -:   11:  struct Node** adjLists;  // Array of pointers to linked list heads
        -:   12:};
        -:   13:// Function to create a new node
function createNode called 3 returned 100% blocks executed 100%
        3:   14:struct Node *createNode(int vertex)
        -:   15:{
        3:   16:  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        3:   17:  newNode->vertex = vertex;
        3:   18:  newNode->next = NULL;
        3:   19:  return newNode;
        -:   20:}
        -:   21:// Function to create a graph with numVertices vertices
function createGraph called 1 returned 100% blocks executed 100%
        1:   22:struct Graph* createGraph(int numVertices)
        -:   23:{
        1:   24:  struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
        1:   25:  graph->numVertices = numVertices;
        -:   26:  // Create an array of pointers to Node to represent adjacency lists
        1:   27:  graph->adjLists = (struct Node**)malloc(numVertices * sizeof(struct Node*));
        -:   28:  // Initialize all adjacency lists as empty
        5:   29:  for (int i = 0; i < numVertices; ++i) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   30:    graph->adjLists[i] = NULL;
        -:   31:  }
        1:   32:  return graph;
        -:   33:}
        -:   34:// Function to add an edge to the graph
function addEdge called 3 returned 100% blocks executed 100%
        3:   35:void addEdge(struct Graph* graph, int src, int dest)
        -:   36:{
        -:   37:  // Create a new node for the destination vertex
        3:   38:  struct Node* newNode = createNode(dest);
call    0 returned 100%
        -:   39:  // Add the node to the front of the adjacency list of source vertex
        3:   40:  newNode->next = graph->adjLists[src];
        3:   41:  graph->adjLists[src] = newNode;
        3:   42:}
        -:   43:// Function to print the graph
function printGraph called 1 returned 100% blocks executed 100%
        1:   44:void printGraph(struct Graph* graph)
        -:   45:{
        5:   46:  for (int v = 0; v < graph->numVertices; ++v) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   47:    printf("\nAdjacency list of vertex %d\n head ", v);
call    0 returned 100%
        4:   48:    struct Node* temp = graph->adjLists[v];
        7:   49:    while (temp) {
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
        3:   50:      printf("-> %d ", temp->vertex);
call    0 returned 100%
        3:   51:      temp = temp->next;
        -:   52:    }
        4:   53:    printf("\n");
call    0 returned 100%
        -:   54:  }
        1:   55:}
