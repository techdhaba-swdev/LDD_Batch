        -:    0:Source:binaryapi.c
function binarysearch called 4 returned 100% blocks executed 83%
        4:    1:int binarysearch(int arr[],int key,int low,int high) //API of binarysearch
        -:    2:{
        4:    3:	int mid=(low+high)/2; //INITIALIZING MID WITH HALF OF LOW+HIGH
        4:    4:	if(low>high) //In case of low is greater than high it will return -1
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:    5:	{
    #####:    6:		return -1;
        -:    7:	}
        4:    8:	if(arr[mid]==key) //return mid if array mid equals to required key value
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:    9:	{
        1:   10:		return mid;
        -:   11:	}
        3:   12:	else if(arr[mid]>key) //recursively calls binarysearch with high=mid-1 if mid value is more then key
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:   13:	{
        2:   14:		return binarysearch(arr,key,low,mid-1);
call    0 returned 100%
        -:   15:	}
        1:   16:	else if(arr[mid]<key) //recursively calls binarysearch with low=mid+1 if mid value is more then key
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   17:	{
        1:   18:		return binarysearch(arr,key,mid+1,high);
call    0 returned 100%
        -:   19:	}
    #####:   20:	return 0;
        -:   21:}
