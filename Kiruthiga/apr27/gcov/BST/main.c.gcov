        -:    0:Source:main.c
        -:    1:#include<stdio.h>
        -:    2:#include"BST.h"
function main called 1 returned 100% blocks executed 90%
        1:    3:int main() {
        -:    4:    // Initialize an empty BST
        1:    5:    struct node* root = NULL;
        -:    6:
        -:    7:    // Inserting elements into the BST
        1:    8:    root = insert(root, 50);
call    0 returned 100%
        1:    9:    insert(root, 30);
call    0 returned 100%
        1:   10:    insert(root, 20);
call    0 returned 100%
        1:   11:    insert(root, 40);
call    0 returned 100%
        1:   12:    insert(root, 70);
call    0 returned 100%
        1:   13:    insert(root, 60);
call    0 returned 100%
        1:   14:    insert(root, 80);
call    0 returned 100%
        -:   15:
        -:   16:    // Performing in-order traversal
        1:   17:    printf("In-order traversal: ");
call    0 returned 100%
        1:   18:    inorderTraversal(root);
call    0 returned 100%
        1:   19:    printf("\n");
call    0 returned 100%
        -:   20:
        -:   21:    // Searching for elements
        1:   22:    int key = 30;
        1:   23:    if (search(root, key)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   24:        printf("%d found in the BST.\n", key);
call    0 returned 100%
        -:   25:    } else {
    #####:   26:        printf("%d not found in the BST.\n", key);
call    0 never executed
        -:   27:    }
        -:   28:
        1:   29:    key = 55;
        1:   30:    if (search(root, key)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   31:        printf("%d found in the BST.\n", key);
call    0 never executed
        -:   32:    } else {
        1:   33:        printf("%d not found in the BST.\n", key);
call    0 returned 100%
        -:   34:    }
        -:   35:
        1:   36:    return 0;
        -:   37:}
        -:   38:
        -:   39:
