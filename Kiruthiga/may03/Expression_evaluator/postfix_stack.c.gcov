        -:    0:Source:postfix_stack.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <ctype.h>
        -:    4:#include "postfix_stack.h"
        -:    5:// Stack functions
function createNode called 8 returned 100% blocks executed 100%
        8:    6:struct Node* createNode(int data) {
        8:    7:    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        8:    8:    newNode->data = data;
        8:    9:    newNode->next = NULL;
        8:   10:    return newNode;
        -:   11:}
        -:   12:
function push called 8 returned 100% blocks executed 100%
        8:   13:void push(struct Node** top, int data) {
        8:   14:    struct Node* newNode = createNode(data);
call    0 returned 100%
        8:   15:    newNode->next = *top;
        8:   16:    *top = newNode;
        8:   17:}
        -:   18:
function pop called 8 returned 100% blocks executed 60%
        8:   19:int pop(struct Node** top) {
        8:   20:    if (*top == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   21:        printf("Stack underflow\n");
call    0 never executed
    #####:   22:        return -1;
        -:   23:    }
        8:   24:    struct Node* temp = *top;
        8:   25:    *top = (*top)->next;
        8:   26:    int data = temp->data;
        8:   27:    free(temp);
        8:   28:    return data;
        -:   29:}
        -:   30:
function peek called 3 returned 100% blocks executed 60%
        3:   31:int peek(struct Node* top) {
        3:   32:    if (top == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("Stack is empty\n");
call    0 never executed
    #####:   34:        return -1;
        -:   35:    }
        3:   36:    return top->data;
        -:   37:}
        -:   38:
function isOperator called 0 returned 0% blocks executed 0%
    #####:   39:int isOperator(char ch) {
    #####:   40:    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   41:}
        -:   42:
function precedence called 2 returned 100% blocks executed 88%
        2:   43:int precedence(char op) {
        2:   44:    if (op == '+' || op == '-')
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:   45:        return 1;
        1:   46:    if (op == '*' || op == '/')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   47:        return 2;
        1:   48:    return 0;
        -:   49:}
        -:   50:
function infixToPostfix called 1 returned 100% blocks executed 93%
        1:   51:void infixToPostfix(char* infix, char* postfix) {
        1:   52:    struct Node* stack = NULL;
        1:   53:    int i = 0, j = 0;
        8:   54:    while (infix[i] != '\0') {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        7:   55:        if (isalnum(infix[i])) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        3:   56:            postfix[j++] = infix[i];
        4:   57:        } else if (infix[i] == '(') {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   58:            push(&stack, infix[i]);
call    0 returned 100%
        3:   59:        } else if (infix[i] == ')') {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   60:            while (peek(stack) != '(') {
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
        1:   61:                postfix[j++] = pop(&stack);
call    0 returned 100%
        -:   62:            }
        1:   63:            pop(&stack); // Discard the '('
call    0 returned 100%
        -:   64:        } else { // Operator
        2:   65:            while (stack != NULL && precedence(infix[i]) <= precedence(peek(stack))) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
    #####:   66:                postfix[j++] = pop(&stack);
call    0 never executed
        -:   67:            }
        2:   68:            push(&stack, infix[i]);
call    0 returned 100%
        -:   69:        }
        7:   70:        i++;
        -:   71:    }
        2:   72:    while (stack != NULL) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   73:        postfix[j++] = pop(&stack);
call    0 returned 100%
        -:   74:    }
        1:   75:    postfix[j] = '\0';
        1:   76:}
        -:   77:
function evaluatePostfix called 1 returned 100% blocks executed 79%
        1:   78:int evaluatePostfix(char* postfix) {
        1:   79:    struct Node* stack = NULL;
        1:   80:    int i = 0;
        6:   81:    while (postfix[i] != '\0') {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   82:        if (isdigit(postfix[i])) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:   83:            push(&stack, postfix[i] - '0');
call    0 returned 100%
        -:   84:        } else {
        2:   85:            int operand2 = pop(&stack);
call    0 returned 100%
        2:   86:            int operand1 = pop(&stack);
call    0 returned 100%
        2:   87:            switch (postfix[i]) {
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 0%
branch  4 taken 0%
        1:   88:                case '+':
        1:   89:                    push(&stack, operand1 + operand2);
call    0 returned 100%
        1:   90:                    break;
    #####:   91:                case '-':
    #####:   92:                    push(&stack, operand1 - operand2);
call    0 never executed
    #####:   93:                    break;
        1:   94:                case '*':
        1:   95:                    push(&stack, operand1 * operand2);
call    0 returned 100%
        1:   96:                    break;
    #####:   97:                case '/':
    #####:   98:                    push(&stack, operand1 / operand2);
call    0 never executed
    #####:   99:                    break;
        -:  100:            }
        -:  101:        }
        5:  102:        i++;
        -:  103:    }
        1:  104:    return pop(&stack);
call    0 returned 100%
        -:  105:}
        -:  106:
        -:  107:
