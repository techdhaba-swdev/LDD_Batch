        -:    0:Source:main.c
        -:    1:#include "node.h"//includes node header file which contains node strucutre with function declarations and header files
        -:    2:#include <time.h>//time.h includes time calculating functions like CLOCK_T
function main called 1 returned 100% blocks executed 95%
        1:    3:int main() {
        1:    4:	clock_t start = clock();
call    0 returned 100%
        1:    5:    struct Node* root = NULL;  // Initialize root pointer
        -:    6:                                          
        -:    7:    // Insert elements into BST
        1:    8:    root = insert(root, 50);  //inserting 50 as root value                                           
call    0 returned 100%
        1:    9:    insert(root, 30);//inserting data 30
call    0 returned 100%
        1:   10:    insert(root, 20);//inserting data 20
call    0 returned 100%
        1:   11:    insert(root, 40);//inserting data 40
call    0 returned 100%
        1:   12:    insert(root, 70);//inserting data 70
call    0 returned 100%
        1:   13:    insert(root, 60);//inserting data 60
call    0 returned 100%
        1:   14:    insert(root, 80);//inserting data 80
call    0 returned 100%
        -:   15:
        -:   16:    // In-order traversal
        1:   17:    printf("In-order traversal: ");   // Print in-order traversal                                   
call    0 returned 100%
        1:   18:    inOrderTraversal(root);//calling in order traversal that returns inorder traversal of root nodes data
call    0 returned 100%
        1:   19:    printf("\n");//print next line
call    0 returned 100%
        -:   20:
        -:   21:    // Search
        1:   22:    int searchValue = 70; // Value to search                                                
        1:   23:    struct Node* searchedNode = search(root, searchValue);  // Search for value              
call    0 returned 100%
        1:   24:    if (searchedNode != NULL) {  //checking weather searchnode is not null                                        
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   25:        printf("%d found in the BST.\n", searchValue);  // Print if found                  
call    0 returned 100%
        -:   26:    } else {
    #####:   27:        printf("%d not found in the BST.\n", searchValue); // Print if not found               
call    0 never executed
        -:   28:    }
        -:   29:
        -:   30:    // Minimum and Maximum
        1:   31:    printf("Minimum value in the BST: %d\n", findMin(root)->data); // Print minimum value
call    0 returned 100%
call    1 returned 100%
        1:   32:    printf("Maximum value in the BST: %d\n", findMax(root)->data); // Print maximum value
call    0 returned 100%
call    1 returned 100%
        -:   33:    // Pre-order traversal
        1:   34:	printf("Pre-order traversal: ");//print the givenstring
call    0 returned 100%
        1:   35:	preOrderTraversal(root);//print preorder travel of root nodes
call    0 returned 100%
        1:   36:	printf("\n");//prins next line
call    0 returned 100%
        -:   37:
        -:   38:	// Post-order traversal
        1:   39:	printf("Post-order traversal: ");//printd the entered string
call    0 returned 100%
        1:   40:	postOrderTraversal(root);//prints post order traversal of root node values
call    0 returned 100%
        1:   41:	printf("\n");//print next line
call    0 returned 100%
        -:   42:
        -:   43:    // Deletion
        1:   44:    int deleteValue = 30; // Value to delete
        1:   45:    root = deleteNode(root, deleteValue); // Delete node
call    0 returned 100%
        1:   46:    printf("In-order traversal after deleting %d: ", deleteValue);// Print in-order traversal
call    0 returned 100%
        1:   47:    inOrderTraversal(root);
call    0 returned 100%
        1:   48:    printf("\n");
call    0 returned 100%
        -:   49:
        -:   50:    // Check if the tree is a BST
       1*:   51:    printf("Is the tree a BST? %s\n", isBST(root) ? "Yes" : "No");// Check if BST property is satisfied
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -:   52:
        -:   53:    // Height
        1:   54:    printf("Height of the BST: %d\n", height(root));// Print height of the tree
call    0 returned 100%
call    1 returned 100%
        1:   55:	clock_t end = clock();
call    0 returned 100%
        1:   56:	double time_used = ((double)(start-end))/CLOCKS_PER_SEC;
        1:   57:		printf("time taken : %f\n",time_used);
call    0 returned 100%
        1:   58:    return 0;
        -:   59:}
        -:   60:
