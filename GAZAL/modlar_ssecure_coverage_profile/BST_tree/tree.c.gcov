        -:    0:Source:tree.c
        -:    1:#include "tree.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:// Define the structure for a node in the BST
        -:    6:struct node {
        -:    7:    int data;               // Data stored in the node
        -:    8:    struct node* left;      // Pointer to the left child node
        -:    9:    struct node* right;     // Pointer to the right child node
        -:   10:};
        -:   11:// Function to create a new node with given data
function createNode called 0 returned 0% blocks executed 0%
    #####:   12:Node* createNode(int data) {
    #####:   13:    Node* newNode = (Node*)malloc(sizeof(Node)); // Allocate memory for the new node
    #####:   14:    if (newNode == NULL) {                       // Check if memory allocation failed
branch  0 never executed
branch  1 never executed
    #####:   15:        fprintf(stderr, "Memory allocation failed\n");
call    0 never executed
    #####:   16:        exit(EXIT_FAILURE);   // Terminate program if memory allocation failed
call    0 never executed
        -:   17:     }
    #####:   18:    newNode->data = data;                        // Set data of the new node
    #####:   19:    newNode->left = NULL;                        // Initialize left child pointer to NULL
    #####:   20:    newNode->right = NULL;                       // Initialize right child pointer to NULL
    #####:   21:    return newNode;                             // Return pointer to the new node
        -:   22:}
        -:   23:
        -:   24:// Function to insert a new node into the BST
function insert called 0 returned 0% blocks executed 0%
    #####:   25:Node* insert(Node* root, int data) {
    #####:   26:    if (root == NULL) {                          // If tree is empty
branch  0 never executed
branch  1 never executed
    #####:   27:        return createNode(data);                 // Create a new node and return as the root
call    0 never executed
        -:   28:    }
        -:   29:
    #####:   30:    if (data < root->data) {                     // If data is less than current node's data
branch  0 never executed
branch  1 never executed
    #####:   31:        root->left = insert(root->left, data);   // Recursively insert into the left subtree
call    0 never executed
    #####:   32:    } else if (data > root->data) {              // If data is greater than current node's data
branch  0 never executed
branch  1 never executed
    #####:   33:        root->right = insert(root->right, data); // Recursively insert into the right subtree
call    0 never executed
        -:   34:    }
        -:   35:
    #####:   36:    return root;                                 // Return the updated root node
        -:   37:}
        -:   38:
        -:   39:// Function to search for a node with given data in the BST
function search called 0 returned 0% blocks executed 0%
    #####:   40:int search(Node* root, int data) {
    #####:   41:    if (root == NULL) {                          // If tree is empty or node not found
branch  0 never executed
branch  1 never executed
    #####:   42:        return 0;                                // Return 0 (not found)
        -:   43:    }
        -:   44:
    #####:   45:    if (root->data == data) {                    // If current node's data matches the search data
branch  0 never executed
branch  1 never executed
    #####:   46:        return 1;                                // Return 1 (found)
    #####:   47:    } else if (data < root->data) {              // If search data is less than current node's data
branch  0 never executed
branch  1 never executed
    #####:   48:        return search(root->left, data);         // Recursively search in the left subtree
call    0 never executed
        -:   49:    } else {                                     // If search data is greater than current node's data
    #####:   50:        return search(root->right, data);        // Recursively search in the right subtree
call    0 never executed
        -:   51:    }
        -:   52:}
        -:   53:
        -:   54:// Function to perform an in-order traversal of the BST
function inorderTraversal called 0 returned 0% blocks executed 0%
    #####:   55:void inorderTraversal(Node* root) {
    #####:   56:    if (root != NULL) {                          // If tree is not empty
branch  0 never executed
branch  1 never executed
    #####:   57:        inorderTraversal(root->left);            // Traverse left subtree
call    0 never executed
    #####:   58:        printf("%d ", root->data);               // Print data of current node
call    0 never executed
    #####:   59:        inorderTraversal(root->right);           // Traverse right subtree
call    0 never executed
        -:   60:    }
    #####:   61:}
