        -:    0:Source:main.c
        -:    1:#include "main.h" // Include the header file for function prototypes (used to secure multiple inclusion)
        -:    2:#include <time.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:// Main function: Example usage
function main called 0 returned 0% blocks executed 0%
    #####:    6:int main() {
    #####:    7:    clock_t start = clock();
call    0 never executed
    #####:    8:    struct Node* root = NULL; // Initialize root pointer to NULL
        -:    9:
        -:   10:    // Insert nodes into the binary tree
    #####:   11:    root = insert(root, 50); // Insert node with value 50
call    0 never executed
    #####:   12:    insert(root, 30); // Insert node with value 30
call    0 never executed
    #####:   13:    insert(root, 20); // Insert node with value 20
call    0 never executed
    #####:   14:    insert(root, 40); // Insert node with value 40
call    0 never executed
    #####:   15:    insert(root, 70); // Insert node with value 70
call    0 never executed
    #####:   16:    insert(root, 60); // Insert node with value 60
call    0 never executed
    #####:   17:    insert(root, 80); // Insert node with value 80
call    0 never executed
        -:   18:
    #####:   19:    printf("In-order traversal: "); // Print message indicating in-order traversal
call    0 never executed
    #####:   20:    inOrder(root); // Perform in-order traversal
call    0 never executed
    #####:   21:    printf("\n"); // Print new line after traversal
call    0 never executed
        -:   22:
    #####:   23:    printf("Sum of all nodes: %d\n", sumOfNodes(root)); // Print sum of all nodes
call    0 never executed
call    1 never executed
        -:   24:
        -:   25:    // Deallocate memory for the binary tree
    #####:   26:    freeTree(root); // Free memory allocated for the binary tree nodes
call    0 never executed
    #####:   27:    clock_t end = clock();
call    0 never executed
    #####:   28:    double time_taken = ((double)(end-start)) / CLOCKS_PER_SEC;
    #####:   29:    printf("time taken is :%f seconds\n", time_taken);
call    0 never executed
    #####:   30:    return 0; // Return 0 to indicate successful program execution
        -:   31:}
