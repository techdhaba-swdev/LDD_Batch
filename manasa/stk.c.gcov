        -:    0:Source:stk.c
        -:    1:#include "stack.h"
        -:    2:
        -:    3:// Function to initialize the stack
function initialize called 1 returned 100% blocks executed 100%
        1:    4:void initialize(Stack *stack) {
        1:    5:    stack->top = -1; // Initialize top to -1 to indicate an empty stack
        1:    6:}
        -:    7:
        -:    8:// Function to check if the stack is empty
function isEmpty called 1 returned 100% blocks executed 100%
        1:    9:int isEmpty(Stack *stack) {
        1:   10:    return (stack->top == -1);
        -:   11:}
        -:   12:
        -:   13:// Function to check if the stack is full
function isFull called 2 returned 100% blocks executed 100%
        2:   14:int isFull(Stack *stack) {
        2:   15:    return (stack->top == MAX_SIZE - 1);
        -:   16:}
        -:   17:
        -:   18:// Function to push an element onto the stack
function push called 2 returned 100% blocks executed 67%
        2:   19:void push(Stack *stack, int value) {
        2:   20:    if (isFull(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   21:        printf("Stack Overflow\n");
call    0 never executed
    #####:   22:        return;
        -:   23:    }
        2:   24:    stack->top++;
        2:   25:    stack->items[stack->top] = value;
        -:   26:}
        -:   27:
        -:   28:// Function to pop an element from the stack
function pop called 1 returned 100% blocks executed 67%
        1:   29:int pop(Stack *stack) {
        1:   30:    if (isEmpty(stack)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   31:        printf("Stack Underflow\n");
call    0 never executed
    #####:   32:        return -1;
        -:   33:    }
        1:   34:    int poppedItem = stack->items[stack->top];
        1:   35:    stack->top--;
        1:   36:    return poppedItem;
        -:   37:}
