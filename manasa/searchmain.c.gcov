        -:    0:Source:searchmain.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:#include "search.h"
        -:    5:
        -:    6:// Function to create a new tree node
function createNode called 7 returned 100% blocks executed 100%
        7:    7:TreeNode* createNode(int val) {
        7:    8:    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
        7:    9:    newNode->val = val;
        7:   10:    newNode->left = NULL;
        7:   11:    newNode->right = NULL;
        7:   12:    return newNode;
        -:   13:}
        -:   14:
        -:   15:// Function to build a sample binary tree
function buildTree called 1 returned 100% blocks executed 100%
        1:   16:TreeNode* buildTree() {
        1:   17:    TreeNode* root = createNode(4);
call    0 returned 100%
        1:   18:    root->left = createNode(2);
call    0 returned 100%
        1:   19:    root->right = createNode(6);
call    0 returned 100%
        1:   20:    root->left->left = createNode(1);
call    0 returned 100%
        1:   21:    root->left->right = createNode(3);
call    0 returned 100%
        1:   22:    root->right->left = createNode(5);
call    0 returned 100%
        1:   23:    root->right->right = createNode(7);
call    0 returned 100%
        1:   24:    return root;
        -:   25:}
        -:   26:
function main called 1 returned 100% blocks executed 90%
        1:   27:int main() {
        -:   28:    clock_t start, end;
        -:   29:    double cpu_time_used;
        -:   30:
        1:   31:    TreeNode* root = buildTree();
call    0 returned 100%
        -:   32:
        1:   33:    start = clock();
call    0 returned 100%
        1:   34:    int result = isBST(root);
call    0 returned 100%
        1:   35:    end = clock();
call    0 returned 100%
        -:   36:
        1:   37:    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        -:   38:
        1:   39:    if (result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:        printf("The tree is a Binary Search Tree.\n");
call    0 returned 100%
        -:   41:    else
    #####:   42:        printf("The tree is not a Binary Search Tree.\n");
call    0 never executed
        -:   43:    
        1:   44:    printf("Time taken: %f seconds\n", cpu_time_used);
call    0 returned 100%
        -:   45:
        1:   46:    return 0;
        -:   47:}
