        -:    0:Source:network.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include "network.h"
        -:    4:#include <stdbool.h>
        -:    5:
function add_user called 3 returned 100% blocks executed 60%
        3:    6:void add_user(Graph *graph, const char *name, const char *interests) {
        3:    7:    if (graph->num_users >= MAX_USERS) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:    8:        printf("Cannot add more users.\n");
call    0 never executed
    #####:    9:        return;
        -:   10:    }
        3:   11:    User *user = &graph->users[graph->num_users++];
        3:   12:    strcpy(user->name, name);
        3:   13:    strcpy(user->interests, interests);
        3:   14:    user->num_friends = 0;
        -:   15:}
        -:   16:
function add_friendship called 2 returned 100% blocks executed 100%
        2:   17:void add_friendship(Graph *graph, const char *user1_name, const char *user2_name) {
        2:   18:    User *user1 = NULL, *user2 = NULL;
        8:   19:    for (int i = 0; i < graph->num_users; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   20:        if (strcmp(graph->users[i].name, user1_name) == 0) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   21:            user1 = &graph->users[i];
        -:   22:        }
        6:   23:        if (strcmp(graph->users[i].name, user2_name) == 0) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   24:            user2 = &graph->users[i];
        -:   25:        }
        -:   26:    }
        2:   27:    if (user1 && user2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:   28:        user1->friends[user1->num_friends++] = user2;
        2:   29:        user2->friends[user2->num_friends++] = user1;
        -:   30:    }
        2:   31:}
        -:   32:
function search_users_by_name called 1 returned 100% blocks executed 100%
        1:   33:void search_users_by_name(Graph *graph, const char *name) {
        1:   34:    printf("Users with name '%s':\n", name);
call    0 returned 100%
        4:   35:    for (int i = 0; i < graph->num_users; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   36:        if (strstr(graph->users[i].name, name)) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   37:            printf("%s\n", graph->users[i].name);
call    0 returned 100%
        -:   38:        }
        -:   39:    }
        1:   40:}
        -:   41:
function search_users_by_interest called 1 returned 100% blocks executed 100%
        1:   42:void search_users_by_interest(Graph *graph, const char *interest) {
        1:   43:    printf("Users interested in '%s':\n", interest);
call    0 returned 100%
        4:   44:    for (int i = 0; i < graph->num_users; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   45:        if (strstr(graph->users[i].interests, interest)) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   46:            printf("%s\n", graph->users[i].name);
call    0 returned 100%
        -:   47:        }
        -:   48:    }
        1:   49:}
        -:   50:
function recommend_friends called 1 returned 100% blocks executed 94%
        1:   51:void recommend_friends(Graph *graph, const char *name) {
        1:   52:    printf("Recommended friends for %s:\n", name);
call    0 returned 100%
       1*:   53:    for (int i = 0; i < graph->num_users; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        1:   54:        if (strcmp(graph->users[i].name, name) == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:            User *user = &graph->users[i];
        2:   56:            for (int j = 0; j < user->num_friends; j++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   57:                User *friend = user->friends[j];
        3:   58:                for (int k = 0; k < friend->num_friends; k++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   59:                    User *potential_friend = friend->friends[k];
        2:   60:                    if (strcmp(potential_friend->name, name) != 0 &&
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   61:                        !is_friend_of_user(user, potential_friend)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   62:                        printf("%s\n", potential_friend->name);
call    0 returned 100%
        -:   63:                    }
        -:   64:                }
        -:   65:            }
        1:   66:            break;
        -:   67:        }
        -:   68:    }
        1:   69:}
        -:   70:
function is_friend_of_user called 1 returned 100% blocks executed 86%
        1:   71:bool is_friend_of_user(User *user, User *potential_friend) {
        2:   72:    for (int i = 0; i < user->num_friends; i++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   73:        if (user->friends[i] == potential_friend) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:            return true;
        -:   75:        }
        -:   76:    }
        1:   77:    return false;
        -:   78:}
