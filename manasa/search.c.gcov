        -:    0:Source:search.c
        -:    1:#include "search.h"
        -:    2:#include <stdbool.h>
        -:    3:#include <stddef.h>
        -:    4:#include <limits.h>
        -:    5:
function isBSTUtil called 15 returned 100% blocks executed 85%
       15:    6:bool isBSTUtil(TreeNode* root, int min_val, int max_val) {
       15:    7:    if (root == NULL) 
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        8:    8:        return true;
        -:    9:    
        7:   10:    if (root->val <= min_val || root->val >= max_val)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   11:        return false;
        -:   12:    
       7*:   13:    return isBSTUtil(root->left, min_val, root->val) && isBSTUtil(root->right, root->val, max_val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   14:}
        -:   15:
function isBST called 1 returned 100% blocks executed 100%
        1:   16:int isBST(TreeNode* root) {
        1:   17:    return isBSTUtil(root, INT_MIN, INT_MAX);
call    0 returned 100%
        -:   18:}
