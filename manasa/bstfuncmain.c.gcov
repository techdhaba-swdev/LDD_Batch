        -:    0:Source:bstfuncmain.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:#include "bstfunc.h"
        -:    5:#include <limits.h>
        -:    6:
function main called 1 returned 100% blocks executed 94%
        1:    7:int main() {
        -:    8:    clock_t start, end;
        -:    9:    double cpu_time_used;
        -:   10:
        -:   11:    // Creating a sample BST
        1:   12:    TreeNode* root = NULL;
        1:   13:    root = insert(root, 4);
call    0 returned 100%
        1:   14:    insert(root, 2);
call    0 returned 100%
        1:   15:    insert(root, 6);
call    0 returned 100%
        1:   16:    insert(root, 1);
call    0 returned 100%
        1:   17:    insert(root, 3);
call    0 returned 100%
        1:   18:    insert(root, 5);
call    0 returned 100%
        1:   19:    insert(root, 7);
call    0 returned 100%
        -:   20:
        -:   21:    // Insertion and deletion
        1:   22:    root = insert(root, 8);
call    0 returned 100%
        1:   23:    root = deleteNode(root, 3);
call    0 returned 100%
        -:   24:
        -:   25:    // Search
        1:   26:    int searchKey = 5;
        1:   27:    TreeNode* searchedNode = search(root, searchKey);
call    0 returned 100%
        1:   28:    if (searchedNode != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   29:        printf("%d found in the BST.\n", searchKey);
call    0 returned 100%
        -:   30:    else
    #####:   31:        printf("%d not found in the BST.\n", searchKey);
call    0 never executed
        -:   32:
        -:   33:    // In-order traversal
        1:   34:    printf("In-order traversal: ");
call    0 returned 100%
        1:   35:    inorderTraversal(root);
call    0 returned 100%
        1:   36:    printf("\n");
call    0 returned 100%
        -:   37:
        -:   38:    // Pre-order traversal
        1:   39:    printf("Pre-order traversal: ");
call    0 returned 100%
        1:   40:    preorderTraversal(root);
call    0 returned 100%
        1:   41:    printf("\n");
call    0 returned 100%
        -:   42:
        -:   43:    // Post-order traversal
        1:   44:    printf("Post-order traversal: ");
call    0 returned 100%
        1:   45:    postorderTraversal(root);
call    0 returned 100%
        1:   46:    printf("\n");
call    0 returned 100%
        -:   47:
        -:   48:    // Check if BST
        1:   49:    if (isBST(root))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   50:        printf("The tree is a Binary Search Tree.\n");
call    0 returned 100%
        -:   51:    else
    #####:   52:        printf("The tree is not a Binary Search Tree.\n");
call    0 never executed
        -:   53:
        -:   54:    // Height of the tree
        1:   55:    int height = findHeight(root);
call    0 returned 100%
        1:   56:    printf("Height of the tree is: %d\n", height);
call    0 returned 100%
        -:   57:
        -:   58:    // Min and Max values
        1:   59:    int min = INT_MAX, max = INT_MIN;
        1:   60:    findMinMax(root, &min, &max);
call    0 returned 100%
        1:   61:    printf("Minimum value in the tree: %d\n", min);
call    0 returned 100%
        1:   62:    printf("Maximum value in the tree: %d\n", max);
call    0 returned 100%
        -:   63:
        -:   64:    // Measure time taken
        1:   65:    start = clock();
call    0 returned 100%
        -:   66:    // Perform operations here...
        1:   67:    end = clock();
call    0 returned 100%
        1:   68:    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        1:   69:    printf("Time taken: %f seconds\n", cpu_time_used);
call    0 returned 100%
        -:   70:
        1:   71:    return 0;
        -:   72:}
