        -:    0:Source:stack.c
        -:    1:#include "stack.h"  // Include header file for stack structure definition (assumed)
        -:    2:#include <stdlib.h>  // Include standard library for memory allocation (malloc, free)
        -:    3:#include <stdio.h>   // Include standard input/output header (printf)
        -:    4:
        -:    5:// Function to push data onto stack
    #####:    6:void push(Stack* stack, char data) {
        -:    7:    // Create a new node for the data
    #####:    8:    Node* newNode = (Node*)malloc(sizeof(Node));
    #####:    9:    if (newNode == NULL) {
    #####:   10:        printf("Error: Memory allocation failed\n");
    #####:   11:        exit(EXIT_FAILURE);
        -:   12:    }
        -:   13:
        -:   14:    // Set data and next pointer of the new node
    #####:   15:    newNode->data = data;
    #####:   16:    newNode->next = stack->top;
        -:   17:
        -:   18:    // Update the top pointer of the stack to point to the new node
    #####:   19:    stack->top = newNode;
    #####:   20:}
        -:   21:
        -:   22:// Function to pop data from stack
    #####:   23:char pop(Stack* stack) {
        -:   24:    // Check if stack is empty
    #####:   25:    if (is_empty(stack)) {
    #####:   26:        printf("Error: Stack is empty\n");
    #####:   27:        exit(EXIT_FAILURE);
        -:   28:    }
        -:   29:// Store the top node and its data
    #####:   30:    Node* temp = stack->top;
    #####:   31:    char data = temp->data;
        -:   32:
        -:   33:    // Update the top pointer to point to the next node
    #####:   34:    stack->top = temp->next;
        -:   35:
        -:   36:    // Free the memory used by the popped node
    #####:   37:    free(temp);
        -:   38:
        -:   39:    // Return the popped data
    #####:   40:    return data;
        -:   41:}
        -:   42:
        -:   43:// Function to peek at the top of the stack
    #####:   44:char peek(Stack* stack) {
        -:   45:    // Check if stack is empty
    #####:   46:    if (is_empty(stack)) {
    #####:   47:        printf("Error: Stack is empty\n");
    #####:   48:        exit(EXIT_FAILURE);
        -:   49:    }
        -:   50:     // Return the data of the top node without removing it
    #####:   51:    return stack->top->data;
        -:   52:}
        -:   53:
        -:   54:// Function to check if stack is empty
    #####:   55:int is_empty(Stack* stack) {
        -:   56:    // Return true if the top pointer is NULL (empty stack)
    #####:   57:    return stack->top == NULL;
        -:   58:}
