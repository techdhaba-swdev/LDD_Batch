        -:    0:Source:expression.c
        -:    1:#include "stack.h"  // Include header file for stack operations (assumed)
        -:    2:#include <ctype.h>  // Include header for character classification functions
        -:    3:#include <stdio.h>  // Include standard input/output header
        -:    4:
        -:    5:// Function to check if character is an operator
    #####:    6:int is_operator(char c) {
        -:    7:    // Check if the character is one of the common arithmetic operators
    #####:    8:    return c == '+' || c == '-' || c == '*' || c == '/';
        -:    9:}
        -:   10:
        -:   11:// Function to get precedence of operator
    #####:   12:int precedence(char c) {
        -:   13:    // Assign precedence levels based on operator type
    #####:   14:    if (c == '+' || c == '-') {
    #####:   15:        return 1;
    #####:   16:    } else if (c == '*' || c == '/') {
    #####:   17:        return 2;
        -:   18:    } else {
    #####:   19:        return 0; // Parentheses have highest precedence (convention)
        -:   20:    }
        -:   21:}
        -:   22:
        -:   23:// Function to convert infix expression to postfix
    #####:   24:void infix_to_postfix(char* infix, char* postfix) {
        -:   25:    Stack stack;  // Declare a stack object for operator manipulation
    #####:   26:    stack.top = NULL;  // Initialize stack to be empty (top pointer points to NULL)
        -:   27:
    #####:   28:    int i = 0, j = 0;  // Indexes for infix and postfix string
    #####:   29:	 while (infix[i] != '\0') { // Loop until null terminator in infix string
    #####:   30:        if (isdigit(infix[i])) {  // Check if current character is a digit
    #####:   31:            postfix[j++] = infix[i++];  // Copy digit to postfix and increment both indexes
    #####:   32:        } else if (infix[i] == '(') {
    #####:   33:            push(&stack, infix[i++]);  // Push '(' onto the stack and increment index
    #####:   34:        } else if (infix[i] == ')') {
    #####:   35:            while (!is_empty(&stack) && peek(&stack) != '(') {
        -:   36:                // Pop operators from stack until encountering '(' and append them to postfix
    #####:   37:                postfix[j++] = pop(&stack);
        -:   38:            }
    #####:   39:            pop(&stack); // Discard '(' from stack
    #####:   40:            i++;  // Increment index after processing closing parenthesis
    #####:   41:        } else if (is_operator(infix[i])) {
    #####:   42:            while (!is_empty(&stack) && precedence(peek(&stack)) >= precedence(infix[i])) {
        -:   43:                // Pop operators with higher or equal precedence from stack and append to postfix
    #####:   44:                postfix[j++] = pop(&stack);
        -:   45:            }
    #####:   46:            push(&stack, infix[i++]);  // Push current operator onto the stack and increment index
        -:   47:        } else {
        -:   48:            // Ignore other characters like spaces (optional handling)
    #####:   49:            i++;
        -:   50:        }
        -:   51:    }
        -:   52:	 // Pop remaining operators from stack after processing infix string
    #####:   53:    while (!is_empty(&stack)) {
    #####:   54:        postfix[j++] = pop(&stack);
        -:   55:    }
        -:   56:
    #####:   57:    postfix[j] = '\0';  // Add null terminator to mark the end of the postfix string
    #####:   58:}
        -:   59:
        -:   60:// Function to evaluate postfix expression
    #####:   61:int evaluate_postfix(char* postfix) {
        -:   62:    Stack stack;  // Declare a stack object for operand manipulation
    #####:   63:    stack.top = NULL;  // Initialize stack to be empty
        -:   64:
    #####:   65:    int i = 0;  // Index for postfix string
        -:   66:
    #####:   67:    while (postfix[i] != '\0') { // Loop until null terminator in postfix string
    #####:   68:        if (isdigit(postfix[i])) {
    #####:   69:            push(&stack, postfix[i] - '0'); // Convert digit character to integer value and push onto stack
    #####:   70:        } else if (is_operator(postfix[i])) {
    #####:   71:            int operand2 = pop(&stack);  // Pop the second operand from the stack
    #####:   72:            int operand1 = pop(&stack);  // Pop the first operand from the stack
    #####:   73:            switch (postfix[i]) {
    #####:   74:                case '+':
    #####:   75:			 push(&stack, operand1 + operand2);  // Perform addition and push result onto stack
    #####:   76:                    break;
    #####:   77:                case '-':
    #####:   78:                    push(&stack, operand1 - operand2);  // Perform subtraction and push result onto stack
    #####:   79:                    break;
    #####:   80:                case '*':
    #####:   81:                    push(&stack, operand1 * operand2);  // Perform multiplication and push result onto stack
    #####:   82:                    break;
    #####:   83:                case '/':
    #####:   84:                    push(&stack, operand1 / operand2);  // Perform division and push result onto stack
    #####:   85:                    break;
        -:   86:            }
        -:   87:        }
    #####:   88:        i++;  // Increment index after processing the current character
        -:   89:    }
        -:   90:
    #####:   91:    return pop(&stack);  // The final element on the stack is the result of the expression
        -:   92:}
