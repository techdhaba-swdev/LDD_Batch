        -:    0:Source:network.c
        -:    1:#include"network.h"
        -:    2:
        -:    3:
        3:    4:void add_user(Graph* graph, const char* name, const char* interests) {
        3:    5:    if (graph->num_users >= MAX_USERS) {
    #####:    6:        printf("Cannot add more users.\n");
    #####:    7:        return;
        -:    8:    }
        3:    9:    User* user = &graph->users[graph->num_users++];
        3:   10:    strncpy(user->name, name, MAX_NAME_LENGTH - 1);
        3:   11:    user->name[MAX_NAME_LENGTH - 1] = '\0'; // Ensure null-terminated string
        3:   12:    strncpy(user->interests, interests, MAX_INTEREST_LENGTH - 1);
        3:   13:    user->interests[MAX_INTEREST_LENGTH - 1] = '\0'; // Ensure null-terminated string
        3:   14:    user->num_friends = 0;
        -:   15:}
        -:   16:
        4:   17:bool are_friends(User* user1, User* user2) {
        6:   18:    for (int i = 0; i < user1->num_friends; i++) {
        3:   19:        if (user1->friends[i] == user2) {
        1:   20:            return true;
        -:   21:        }
        -:   22:    }
        3:   23:    return false;
        -:   24:}
        -:   25:
        2:   26:void add_friendship(Graph* graph, const char* user1_name, const char* user2_name) {
        2:   27:    User* user1 = NULL, * user2 = NULL;
        8:   28:    for (int i = 0; i < graph->num_users; i++) {
        6:   29:        if (strcmp(graph->users[i].name, user1_name) == 0) {
        2:   30:            user1 = &graph->users[i];
        -:   31:        }
        6:   32:        if (strcmp(graph->users[i].name, user2_name) == 0) {
        2:   33:            user2 = &graph->users[i];
        -:   34:        }
        -:   35:    }
        2:   36:    if (!user1 || !user2) {
    #####:   37:        printf("One or both users not found.\n");
    #####:   38:        return;
        -:   39:    }
        2:   40:    if (user1->num_friends >= MAX_USERS || user2->num_friends >= MAX_USERS) {
    #####:   41:        printf("Cannot add more friends for one or both users.\n");
    #####:   42:        return;
        -:   43:    }
        2:   44:    if (are_friends(user1, user2)) {
    #####:   45:        printf("Users are already friends.\n");
    #####:   46:        return;
        -:   47:    }
        2:   48:    user1->friends[user1->num_friends++] = user2;
        2:   49:    user2->friends[user2->num_friends++] = user1;
        -:   50:}
        -:   51:
        1:   52:void search_users_by_name(Graph* graph, const char* name) {
        1:   53:    printf("Users with name '%s':\n", name);
        1:   54:    bool found = false;
        4:   55:    for (int i = 0; i < graph->num_users; i++) {
        3:   56:        if (strstr(graph->users[i].name, name)) {
        1:   57:            printf("%s\n", graph->users[i].name);
        1:   58:            found = true;
        -:   59:        }
        -:   60:    }
        1:   61:    if (!found) {
    #####:   62:        printf("No users found with that name.\n");
        -:   63:    }
        1:   64:}
        -:   65:
        1:   66:void search_users_by_interest(Graph* graph, const char* interest) {
        1:   67:    printf("Users interested in '%s':\n", interest);
        1:   68:    bool found = false;
        4:   69:    for (int i = 0; i < graph->num_users; i++) {
        3:   70:        if (strstr(graph->users[i].interests, interest)) {
        2:   71:            printf("%s\n", graph->users[i].name);
        2:   72:            found = true;
        -:   73:        }
        -:   74:    }
        1:   75:    if (!found) {
    #####:   76:        printf("No users found interested in that.\n");
        -:   77:    }
        1:   78:}
        -:   79:
        1:   80:void recommend_friends(Graph* graph, const char* name) {
        1:   81:    printf("Recommended friends for %s:\n", name);
        1:   82:    bool found = false;
       1*:   83:    for (int i = 0; i < graph->num_users; i++) {
        1:   84:        if (strcmp(graph->users[i].name, name) == 0) {
        1:   85:            User* user = &graph->users[i];
        4:   86:            for (int j = 0; j < graph->num_users; j++) {
        3:   87:                User* potential_friend = &graph->users[j];
        3:   88:                if (strcmp(potential_friend->name, name) != 0 &&
        2:   89:                    !are_friends(user, potential_friend)) {
        1:   90:                    printf("%s\n", potential_friend->name);
        1:   91:                    found = true;
        -:   92:                }
        -:   93:            }
        1:   94:            break;
        -:   95:        }
        -:   96:    }
        1:   97:    if (!found) {
    #####:   98:        printf("No recommended friends.\n");
        -:   99:    }
        1:  100:}
        -:  101:
        -:  102:
