        -:    0:Source:pthread1.c
        -:    1:#include "pthread1.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:
function readLines called 1 returned 0% blocks executed 86%
        1:    6:void* readLines(void* arg) {
        1:    7:    FILE* file = fopen(INPUT_FILE_NAME, "r");
call    0 returned 100%
        -:    8:    char line[MAX_LENGTH];
        1:    9:    int lineNumber = 1;
        -:   10:
        1:   11:    if (file == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:        perror("Error opening file");
call    0 never executed
    #####:   13:        exit(EXIT_FAILURE);
call    0 never executed
        -:   14:    }
        -:   15:
        1:   16:    LineBuffer* buffer = (LineBuffer*)arg;
        -:   17:
       21:   18:    while (fgets(line, sizeof(line), file) != NULL) {
call    0 returned 100%
branch  1 taken 95%
branch  2 taken 5% (fallthrough)
       20:   19:        pthread_mutex_lock(&buffer->mutex);
call    0 returned 100%
       20:   20:        if (lineNumber % 2 == 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       10:   21:            strcpy(buffer->lines[buffer->count++], line);
        -:   22:        }
       20:   23:        pthread_mutex_unlock(&buffer->mutex);
call    0 returned 100%
       20:   24:        lineNumber++;
        -:   25:    }
        -:   26:
        1:   27:    fclose(file);
call    0 returned 100%
        1:   28:    pthread_exit(NULL);
        -:   29:}
        -:   30:
function writeLines called 2 returned 0% blocks executed 80%
        2:   31:void* writeLines(void* arg) {
        2:   32:    LineBuffer* buffer = (LineBuffer*)arg;
        -:   33:    FILE* file;
        -:   34:    char* fileName;
        -:   35:
        2:   36:    if (strcmp((char*)arg, "even") == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   37:        fileName = EVEN_OUTPUT_FILE_NAME;
        -:   38:    } else {
        2:   39:        fileName = ODD_OUTPUT_FILE_NAME;
        -:   40:    }
        -:   41:
        2:   42:    file = fopen(fileName, "w");
call    0 returned 100%
        -:   43:
        2:   44:    if (file == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:        perror("Error opening file");
call    0 never executed
    #####:   46:        exit(EXIT_FAILURE);
call    0 never executed
        -:   47:    }
        -:   48:
        2:   49:    pthread_mutex_lock(&buffer->mutex);
call    0 returned 100%
       12:   50:    for (int i = 0; i < buffer->count; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:   51:        fputs(buffer->lines[i], file);
call    0 returned 100%
        -:   52:    }
        2:   53:    pthread_mutex_unlock(&buffer->mutex);
call    0 returned 100%
        -:   54:
        2:   55:    fclose(file);
call    0 returned 100%
        2:   56:    pthread_exit(NULL);
        -:   57:}
        -:   58:
