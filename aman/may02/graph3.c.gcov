        -:    0:Source:graph3.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "graph3.h"
        -:    4:
        -:    5:int **adjMatrix; // Global variable for adjacency matrix
        -:    6:
function initializeGraph called 1 returned 100% blocks executed 60%
        1:    7:void initializeGraph(int numVertices) {
        1:    8:  adjMatrix = (int **)malloc(numVertices * sizeof(int *));
        1:    9:  if (adjMatrix == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    printf("Memory allocation failed\n");
call    0 never executed
    #####:   11:    exit(EXIT_FAILURE);
call    0 never executed
        -:   12:  }
        -:   13:  
        5:   14:  for (int i = 0; i < numVertices; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   15:    adjMatrix[i] = (int *)calloc(numVertices, sizeof(int));
        4:   16:    if (adjMatrix[i] == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:      printf("Memory allocation failed\n");
call    0 never executed
    #####:   18:      exit(EXIT_FAILURE);
call    0 never executed
        -:   19:    }
        -:   20:  }
        1:   21:}
        -:   22:
function addEdge called 3 returned 100% blocks executed 86%
        3:   23:void addEdge(int src, int dest, int numVertices) {
        3:   24:  if (src >= 0 && src < numVertices && dest >= 0 && dest < numVertices) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        3:   25:    adjMatrix[src][dest] = 1; // Mark 1 to indicate an edge
        -:   26:  } else {
    #####:   27:    printf("Invalid edge: (%d, %d)\n", src, dest);
call    0 never executed
        -:   28:  }
        3:   29:}
        -:   30:
function printGraph called 1 returned 100% blocks executed 100%
        1:   31:void printGraph(int numVertices) {
        1:   32:  printf("Adjacency Matrix:\n");
call    0 returned 100%
        5:   33:  for (int i = 0; i < numVertices; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       20:   34:    for (int j = 0; j < numVertices; j++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       16:   35:      printf("%d ", adjMatrix[i][j]);
call    0 returned 100%
        -:   36:    }
        4:   37:    printf("\n");
call    0 returned 100%
        -:   38:  }
        1:   39:}
        -:   40:
function freeGraph called 1 returned 100% blocks executed 100%
        1:   41:void freeGraph(int numVertices) {
        5:   42:  for (int i = 0; i < numVertices; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   43:    free(adjMatrix[i]);
        -:   44:  }
        1:   45:  free(adjMatrix);
        1:   46:}
        -:   47:
